/// <reference types="node" />
declare const _default: {
    BAccordion: import("vue").DefineComponent<{
        flush: {
            type: null;
            required: false;
            default: boolean;
        };
        free: {
            type: null;
            required: false;
            default: boolean;
        };
        id: {
            type: StringConstructor;
            required: false;
            default: undefined;
        };
    }, {
        injectionKey: import("vue").InjectionKey<string>;
        props: {
            flush: import("../types/Booleanish").default;
            free: import("../types/Booleanish").default;
            id: string;
        };
        computedId: import("vue").ComputedRef<string>;
        flushBoolean: import("vue").ComputedRef<boolean>;
        freeBoolean: import("vue").ComputedRef<boolean>;
        classes: import("vue").ComputedRef<{
            'accordion-flush': boolean;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        flush: {
            type: null;
            required: false;
            default: boolean;
        };
        free: {
            type: null;
            required: false;
            default: boolean;
        };
        id: {
            type: StringConstructor;
            required: false;
            default: undefined;
        };
    }>>, {
        flush: any;
        free: any;
        id: string;
    }>;
    BAccordionItem: import("vue").DefineComponent<{
        id: {
            type: StringConstructor;
            required: false;
        };
        title: {
            type: StringConstructor;
            required: false;
        };
        visible: {
            type: null;
            required: false;
            default: boolean;
        };
    }, {
        props: {
            id?: string | undefined;
            title?: string | undefined;
            visible: import("../types/Booleanish").default;
        };
        visibleBoolean: import("vue").ComputedRef<boolean>;
        computedId: import("vue").ComputedRef<string>;
        parent: string;
        BCollapse: import("vue").DefineComponent<{
            accordion: {
                type: StringConstructor;
                required: false;
            };
            id: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            modelValue: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            tag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            toggle: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            visible: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            isNav: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
        }, {
            props: {
                accordion?: string | undefined;
                id: string;
                modelValue: boolean;
                tag: string;
                toggle: boolean;
                visible: boolean;
                isNav: boolean;
            };
            emit: {
                (e: "update:modelValue", value: boolean): void;
                (e: "show"): void;
                (e: "shown"): void;
                (e: "hide"): void;
                (e: "hidden"): void;
            };
            element: import("vue").Ref<HTMLElement | undefined>;
            instance: import("vue").Ref<import("bootstrap/js/dist/collapse").default | undefined>;
            classes: import("vue").ComputedRef<{
                show: boolean;
                'navbar-collapse': boolean;
            }>;
            close: () => void;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "show" | "shown" | "hide" | "hidden")[], "update:modelValue" | "show" | "shown" | "hide" | "hidden", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            accordion: {
                type: StringConstructor;
                required: false;
            };
            id: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            modelValue: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            tag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            toggle: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            visible: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            isNav: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
        }>> & {
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
            onShow?: ((...args: any[]) => any) | undefined;
            onShown?: ((...args: any[]) => any) | undefined;
            onHide?: ((...args: any[]) => any) | undefined;
            onHidden?: ((...args: any[]) => any) | undefined;
        }, {
            id: string;
            visible: boolean;
            modelValue: boolean;
            tag: string;
            toggle: boolean;
            isNav: boolean;
        }>;
        vBToggle: import("vue").Directive<HTMLElement, any>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        id: {
            type: StringConstructor;
            required: false;
        };
        title: {
            type: StringConstructor;
            required: false;
        };
        visible: {
            type: null;
            required: false;
            default: boolean;
        };
    }>>, {
        visible: any;
    }>;
    BAlert: import("vue").DefineComponent<{
        dismissLabel: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        dismissible: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        fade: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        modelValue: {
            type: (BooleanConstructor | NumberConstructor)[];
            required: false;
            default: boolean;
        };
        show: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        variant: {
            type: null;
            required: false;
            default: string;
        };
    }, {
        props: {
            dismissLabel: string;
            dismissible: boolean;
            fade: boolean;
            modelValue: number | boolean;
            show: boolean;
            variant: import("../types/ColorVariant").default;
        };
        emit: {
            (e: "dismissed"): void;
            (e: "dismiss-count-down", value: number): void;
            (e: "update:modelValue", value: number | boolean): void;
        };
        element: import("vue").Ref<HTMLElement | undefined>;
        instance: import("vue").Ref<import("bootstrap/js/dist/alert").default | undefined>;
        classes: import("vue").ComputedRef<{
            [x: string]: number | boolean | import("../types/ColorVariant").default;
            show: number | boolean;
            'alert-dismissible': boolean;
            fade: number | boolean;
        }>;
        _countDownTimeout: NodeJS.Timeout | undefined;
        parseCountDown: (value: number | boolean) => number;
        clearCountDownInterval: () => void;
        countDown: import("vue").Ref<number>;
        isAlertVisible: import("vue").ComputedRef<boolean>;
        parsedModelValue: import("vue").ComputedRef<boolean>;
        handleShowAndModelChanged: () => void;
        dismissClicked: () => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "dismissed" | "dismiss-count-down")[], "update:modelValue" | "dismissed" | "dismiss-count-down", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        dismissLabel: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        dismissible: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        fade: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        modelValue: {
            type: (BooleanConstructor | NumberConstructor)[];
            required: false;
            default: boolean;
        };
        show: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        variant: {
            type: null;
            required: false;
            default: string;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onDismissed?: ((...args: any[]) => any) | undefined;
        "onDismiss-count-down"?: ((...args: any[]) => any) | undefined;
    }, {
        show: boolean;
        modelValue: number | boolean;
        dismissLabel: string;
        dismissible: boolean;
        fade: boolean;
        variant: any;
    }>;
    BAvatar: import("vue").DefineComponent<{
        alt: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        ariaLabel: {
            type: StringConstructor;
            required: false;
        };
        badge: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        badgeLeft: {
            type: null;
            required: false;
            default: boolean;
        };
        badgeOffset: {
            type: StringConstructor;
            required: false;
        };
        badgeTop: {
            type: null;
            required: false;
            default: boolean;
        };
        badgeVariant: {
            type: null;
            required: false;
            default: string;
        };
        button: {
            type: null;
            required: false;
            default: boolean;
        };
        buttonType: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        disabled: {
            type: null;
            required: false;
            default: boolean;
        };
        icon: {
            type: StringConstructor;
            required: false;
        };
        rounded: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: string;
        };
        size: {
            type: StringConstructor;
            required: false;
        };
        square: {
            type: null;
            required: false;
            default: boolean;
        };
        src: {
            type: StringConstructor;
            required: false;
        };
        text: {
            type: StringConstructor;
            required: false;
        };
        textVariant: {
            type: null;
            required: false;
            default: undefined;
        };
        variant: {
            type: null;
            required: false;
            default: string;
        };
    }, {
        computeSize: (value: any) => string | null;
        props: {
            alt: string;
            ariaLabel?: string | undefined;
            badge: string | boolean;
            badgeLeft: import("../types/Booleanish").default;
            badgeOffset?: string | undefined;
            badgeTop: import("../types/Booleanish").default;
            badgeVariant: import("../types/ColorVariant").default;
            button: import("../types/Booleanish").default;
            buttonType: string;
            disabled: import("../types/Booleanish").default;
            icon?: string | undefined;
            rounded: string | boolean;
            size?: string | undefined;
            square: import("../types/Booleanish").default;
            src?: string | undefined;
            text?: string | undefined;
            textVariant: import("../types/ColorVariant").default;
            variant: import("../types/ColorVariant").default;
        };
        badgeLeftBoolean: import("vue").ComputedRef<boolean>;
        badgeTopBoolean: import("vue").ComputedRef<boolean>;
        buttonBoolean: import("vue").ComputedRef<boolean>;
        disabledBoolean: import("vue").ComputedRef<boolean>;
        squareBoolean: import("vue").ComputedRef<boolean>;
        emit: {
            (e: "click", value: MouseEvent): void;
            (e: "img-error", value: Event): void;
        };
        slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        SIZES: (string | null)[];
        FONT_SIZE_SCALE: number;
        BADGE_FONT_SIZE_SCALE: number;
        parentData: import("../types/components").BAvatarGroupParentData | null;
        computeContrastVariant: (colorVariant: import("../types/ColorVariant").default) => import("../types/ColorVariant").default;
        hasDefaultSlot: import("vue").ComputedRef<boolean>;
        hasBadgeSlot: import("vue").ComputedRef<boolean>;
        showBadge: import("vue").ComputedRef<string | boolean>;
        computedSize: import("vue").ComputedRef<string | null>;
        computedVariant: import("vue").ComputedRef<import("../types/ColorVariant").default>;
        computedRounded: import("vue").ComputedRef<string | boolean>;
        attrs: import("vue").ComputedRef<{
            'aria-label': string | null;
            disabled: true | null;
        }>;
        badgeClasses: import("vue").ComputedRef<{
            [x: string]: import("../types/ColorVariant").default;
        }>;
        badgeText: import("vue").ComputedRef<string | false>;
        badgeTextClasses: import("vue").ComputedRef<string>;
        classes: import("vue").ComputedRef<{
            [x: string]: boolean | "" | import("../types/ColorVariant").default | null | undefined;
            badge: boolean;
            rounded: boolean;
            "rounded-circle": boolean;
            "rounded-0": boolean;
            "rounded-1": boolean;
            "rounded-3": boolean;
            "rounded-top": boolean;
            "rounded-bottom": boolean;
            "rounded-start": boolean;
            "rounded-end": boolean;
            btn: boolean;
        }>;
        textClasses: import("vue").ComputedRef<string>;
        badgeStyle: import("vue").ComputedRef<import("vue").StyleValue>;
        fontStyle: import("vue").ComputedRef<import("vue").StyleValue>;
        marginStyle: import("vue").ComputedRef<{
            marginLeft: string;
            marginRight: string;
        } | {
            marginLeft?: undefined;
            marginRight?: undefined;
        }>;
        tag: import("vue").ComputedRef<string>;
        tagStyle: import("vue").ComputedRef<{
            width: string | null;
            height: string | null;
            marginLeft: string;
            marginRight: string;
        } | {
            width: string | null;
            height: string | null;
            marginLeft?: undefined;
            marginRight?: undefined;
        }>;
        clicked: (e: MouseEvent) => void;
        onImgError: (e: Event) => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click" | "img-error")[], "click" | "img-error", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        alt: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        ariaLabel: {
            type: StringConstructor;
            required: false;
        };
        badge: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        badgeLeft: {
            type: null;
            required: false;
            default: boolean;
        };
        badgeOffset: {
            type: StringConstructor;
            required: false;
        };
        badgeTop: {
            type: null;
            required: false;
            default: boolean;
        };
        badgeVariant: {
            type: null;
            required: false;
            default: string;
        };
        button: {
            type: null;
            required: false;
            default: boolean;
        };
        buttonType: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        disabled: {
            type: null;
            required: false;
            default: boolean;
        };
        icon: {
            type: StringConstructor;
            required: false;
        };
        rounded: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: string;
        };
        size: {
            type: StringConstructor;
            required: false;
        };
        square: {
            type: null;
            required: false;
            default: boolean;
        };
        src: {
            type: StringConstructor;
            required: false;
        };
        text: {
            type: StringConstructor;
            required: false;
        };
        textVariant: {
            type: null;
            required: false;
            default: undefined;
        };
        variant: {
            type: null;
            required: false;
            default: string;
        };
    }>> & {
        onClick?: ((...args: any[]) => any) | undefined;
        "onImg-error"?: ((...args: any[]) => any) | undefined;
    }, {
        variant: any;
        button: any;
        alt: string;
        badge: string | boolean;
        badgeLeft: any;
        badgeTop: any;
        badgeVariant: any;
        buttonType: string;
        disabled: any;
        rounded: string | boolean;
        square: any;
        textVariant: any;
    }>;
    BAvatarGroup: import("vue").DefineComponent<{
        overlap: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
            default: number;
        };
        rounded: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        size: {
            type: StringConstructor;
            required: false;
        };
        square: {
            type: null;
            required: false;
            default: boolean;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        variant: {
            type: null;
            required: false;
        };
    }, {
        injectionKey: import("vue").InjectionKey<import("../types/components").BAvatarGroupParentData>;
        props: {
            overlap: string | number;
            rounded: string | boolean;
            size?: string | undefined;
            square: import("../types/Booleanish").default;
            tag: string;
            variant?: import("../types/ColorVariant").default | undefined;
        };
        squareBoolean: import("vue").ComputedRef<boolean>;
        computedSize: import("vue").ComputedRef<string | null>;
        computeOverlap: (value: any) => number;
        overlapScale: import("vue").ComputedRef<number>;
        paddingStyle: import("vue").ComputedRef<import("vue").StyleValue>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        overlap: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
            default: number;
        };
        rounded: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        size: {
            type: StringConstructor;
            required: false;
        };
        square: {
            type: null;
            required: false;
            default: boolean;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        variant: {
            type: null;
            required: false;
        };
    }>>, {
        tag: string;
        rounded: string | boolean;
        square: any;
        overlap: string | number;
    }>;
    BBadge: import("vue").DefineComponent<any, {
        classes: import("vue").ComputedRef<{
            [x: string]: any;
            active: any;
            disabled: any;
            'text-dark': boolean;
            'rounded-pill': boolean;
            'position-absolute top-0 start-100 translate-middle': boolean;
            'p-2 border border-light rounded-circle': boolean;
            'text-decoration-none': boolean;
        }>;
        props: any;
        computedTag: import("vue").ComputedRef<string>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<any>, {} | {
        [x: string]: any;
    }>;
    BBreadcrumb: import("vue").DefineComponent<{
        items: {
            type: ArrayConstructor;
            required: false;
        };
    }, {
        props: {
            items?: import("../types/BreadcrumbItem").default[] | undefined;
        };
        breadcrumb: import("../composables/useBreadcrumb").UseBreadcrumbI;
        breadcrumbItemObjects: import("vue").ComputedRef<import("../types").BreadcrumbItemObject[]>;
        BBreadcrumbItem: import("vue").DefineComponent<any, {
            liClasses: import("vue").ComputedRef<{
                active: any;
            }>;
            computedTag: import("vue").ComputedRef<"span" | "b-link">;
            computedAriaCurrent: import("vue").ComputedRef<{
                'aria-current': any;
            }>;
            clicked: (e: MouseEvent) => void;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<any> & {
            onClick?: ((...args: any[]) => any) | undefined;
        }, {} | {
            [x: string]: any;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        items: {
            type: ArrayConstructor;
            required: false;
        };
    }>>, {}>;
    BBreadcrumbItem: import("vue").DefineComponent<any, {
        liClasses: import("vue").ComputedRef<{
            active: any;
        }>;
        computedTag: import("vue").ComputedRef<"span" | "b-link">;
        computedAriaCurrent: import("vue").ComputedRef<{
            'aria-current': any;
        }>;
        clicked: (e: MouseEvent) => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<any> & {
        onClick?: ((...args: any[]) => any) | undefined;
    }, {} | {
        [x: string]: any;
    }>;
    BButton: import("vue").DefineComponent<{
        active: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        disabled: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        href: {
            type: StringConstructor;
            required: false;
        };
        pill: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        pressed: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: null;
        };
        rel: {
            type: StringConstructor;
            default: null;
        };
        size: {
            type: import("vue").PropType<import("../types/InputSize").default>;
        };
        squared: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        tag: {
            type: StringConstructor;
            default: string;
        };
        target: {
            type: import("vue").PropType<import("../types/LinkTarget").default>;
            default: string;
        };
        type: {
            type: StringConstructor;
            default: string;
        };
        variant: {
            type: import("vue").PropType<import("../types/ButtonVariant").default>;
            default: string;
        };
        activeClass: {
            type: StringConstructor;
            default: string;
        };
        append: {
            type: BooleanConstructor;
            default: boolean;
        };
        event: {
            type: (StringConstructor | ArrayConstructor)[];
            default: string;
        };
        exact: {
            type: BooleanConstructor;
            default: boolean;
        };
        exactActiveClass: {
            type: StringConstructor;
            default: string;
        };
        replace: {
            type: BooleanConstructor;
            default: boolean;
        };
        routerComponentName: {
            type: StringConstructor;
            default: string;
        };
        routerTag: {
            type: StringConstructor;
            default: string;
        };
        to: {
            type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
            default: null;
        };
    }, {
        classes: import("vue").ComputedRef<{
            [x: string]: boolean | import("../types/InputSize").default | import("../types/ButtonVariant").default | undefined;
            active: boolean;
            'rounded-pill': boolean;
            'rounded-0': boolean;
            disabled: boolean;
        }>;
        attrs: import("vue").ComputedRef<{
            'aria-disabled': string | null;
            'aria-pressed': string | null;
            autocomplete: string | null;
            disabled: boolean | null;
            href: string | undefined;
            rel: string | null;
            role: string | null;
            target: import("../types/LinkTarget").default | null;
            type: string | null;
            to: import("vue-router").RouteLocationRaw | null;
            append: boolean | null;
            activeClass: string | null;
            event: string | unknown[] | null;
            exact: boolean | null;
            exactActiveClass: string | null;
            replace: boolean | null;
            routerComponentName: string | null;
            routerTag: string | null;
        }>;
        computedTag: import("vue").ComputedRef<string>;
        clicked: (e: MouseEvent) => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click" | "update:pressed")[], "click" | "update:pressed", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        active: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        disabled: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        href: {
            type: StringConstructor;
            required: false;
        };
        pill: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        pressed: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: null;
        };
        rel: {
            type: StringConstructor;
            default: null;
        };
        size: {
            type: import("vue").PropType<import("../types/InputSize").default>;
        };
        squared: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        tag: {
            type: StringConstructor;
            default: string;
        };
        target: {
            type: import("vue").PropType<import("../types/LinkTarget").default>;
            default: string;
        };
        type: {
            type: StringConstructor;
            default: string;
        };
        variant: {
            type: import("vue").PropType<import("../types/ButtonVariant").default>;
            default: string;
        };
        activeClass: {
            type: StringConstructor;
            default: string;
        };
        append: {
            type: BooleanConstructor;
            default: boolean;
        };
        event: {
            type: (StringConstructor | ArrayConstructor)[];
            default: string;
        };
        exact: {
            type: BooleanConstructor;
            default: boolean;
        };
        exactActiveClass: {
            type: StringConstructor;
            default: string;
        };
        replace: {
            type: BooleanConstructor;
            default: boolean;
        };
        routerComponentName: {
            type: StringConstructor;
            default: string;
        };
        routerTag: {
            type: StringConstructor;
            default: string;
        };
        to: {
            type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
            default: null;
        };
    }>> & {
        onClick?: ((...args: any[]) => any) | undefined;
        "onUpdate:pressed"?: ((...args: any[]) => any) | undefined;
    }, {
        replace: boolean;
        type: string;
        tag: string;
        variant: import("../types/ButtonVariant").default;
        disabled: import("../types/Booleanish").default;
        exact: boolean;
        active: import("../types/Booleanish").default;
        pill: import("../types/Booleanish").default;
        to: import("vue-router").RouteLocationRaw;
        event: string | unknown[];
        routerTag: string;
        pressed: import("../types/Booleanish").default;
        rel: string;
        squared: import("../types/Booleanish").default;
        target: import("../types/LinkTarget").default;
        activeClass: string;
        append: boolean;
        exactActiveClass: string;
        routerComponentName: string;
    }>;
    BButtonGroup: import("vue").DefineComponent<{
        ariaRole: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        size: {
            type: StringConstructor;
            required: false;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        vertical: {
            type: null;
            required: false;
            default: boolean;
        };
    }, {
        props: {
            ariaRole: string;
            size?: string | undefined;
            tag: string;
            vertical: import("../types/Booleanish").default;
        };
        verticalBoolean: import("vue").ComputedRef<boolean>;
        classes: import("vue").ComputedRef<{
            [x: string]: string | boolean | undefined;
            'btn-group': boolean;
            'btn-group-vertical': boolean;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        ariaRole: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        size: {
            type: StringConstructor;
            required: false;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        vertical: {
            type: null;
            required: false;
            default: boolean;
        };
    }>>, {
        tag: string;
        vertical: any;
        ariaRole: string;
    }>;
    BButtonToolbar: import("vue").DefineComponent<{
        ariaRole: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        justify: {
            type: null;
            required: false;
            default: boolean;
        };
    }, {
        props: {
            ariaRole: string;
            justify: import("../types/Booleanish").default;
        };
        justifyBoolean: import("vue").ComputedRef<boolean>;
        classes: import("vue").ComputedRef<{
            'justify-content-between': boolean;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        ariaRole: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        justify: {
            type: null;
            required: false;
            default: boolean;
        };
    }>>, {
        justify: any;
        ariaRole: string;
    }>;
    BCard: import("vue").DefineComponent<{
        align: {
            type: null;
            required: false;
        };
        bgVariant: {
            type: null;
            required: false;
        };
        bodyBgVariant: {
            type: null;
            required: false;
        };
        bodyClass: {
            type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
            required: false;
        };
        bodyTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        bodyTextVariant: {
            type: null;
            required: false;
        };
        borderVariant: {
            type: null;
            required: false;
        };
        footer: {
            type: StringConstructor;
            required: false;
        };
        footerBgVariant: {
            type: null;
            required: false;
        };
        footerBorderVariant: {
            type: null;
            required: false;
        };
        footerClass: {
            type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
            required: false;
        };
        footerHtml: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        footerTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        footerTextVariant: {
            type: null;
            required: false;
        };
        header: {
            type: StringConstructor;
            required: false;
        };
        headerBgVariant: {
            type: null;
            required: false;
        };
        headerBorderVariant: {
            type: null;
            required: false;
        };
        headerClass: {
            type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
            required: false;
        };
        headerHtml: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        headerTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        headerTextVariant: {
            type: null;
            required: false;
        };
        imgAlt: {
            type: StringConstructor;
            required: false;
        };
        imgBottom: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        imgEnd: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        imgHeight: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        imgLeft: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        imgRight: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        imgSrc: {
            type: StringConstructor;
            required: false;
        };
        imgStart: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        imgTop: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        imgWidth: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        noBody: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        overlay: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        subTitle: {
            type: StringConstructor;
            required: false;
        };
        subTitleTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        subTitleTextVariant: {
            type: null;
            required: false;
            default: string;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        textVariant: {
            type: null;
            required: false;
        };
        title: {
            type: StringConstructor;
            required: false;
        };
        titleTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }, {
        props: {
            align?: import("../types/Alignment").default | undefined;
            bgVariant?: import("../types/ColorVariant").default | undefined;
            bodyBgVariant?: import("../types/ColorVariant").default | undefined;
            bodyClass?: string | unknown[] | Record<string, unknown> | undefined;
            bodyTag: string;
            bodyTextVariant?: import("../types/ColorVariant").default | undefined;
            borderVariant?: import("../types/ColorVariant").default | undefined;
            footer?: string | undefined;
            footerBgVariant?: import("../types/ColorVariant").default | undefined;
            footerBorderVariant?: import("../types/ColorVariant").default | undefined;
            footerClass?: string | unknown[] | Record<string, unknown> | undefined;
            footerHtml: string;
            footerTag: string;
            footerTextVariant?: import("../types/ColorVariant").default | undefined;
            header?: string | undefined;
            headerBgVariant?: import("../types/ColorVariant").default | undefined;
            headerBorderVariant?: import("../types/ColorVariant").default | undefined;
            headerClass?: string | unknown[] | Record<string, unknown> | undefined;
            headerHtml: string;
            headerTag: string;
            headerTextVariant?: import("../types/ColorVariant").default | undefined;
            imgAlt?: string | undefined;
            imgBottom: boolean;
            imgEnd: boolean;
            imgHeight?: string | number | undefined;
            imgLeft: boolean;
            imgRight: boolean;
            imgSrc?: string | undefined;
            imgStart: boolean;
            imgTop: boolean;
            imgWidth?: string | number | undefined;
            noBody: boolean;
            overlay: boolean;
            subTitle?: string | undefined;
            subTitleTag: string;
            subTitleTextVariant: import("../types/TextColorVariant").default;
            tag: string;
            textVariant?: import("../types/TextColorVariant").default | undefined;
            title?: string | undefined;
            titleTag: string;
        };
        classes: import("vue").ComputedRef<{
            [x: string]: boolean | "fill" | "info" | "primary" | "secondary" | "success" | "danger" | "warning" | "light" | "dark" | "white" | "center" | "end" | "start" | "reset" | "muted" | "body" | "black-50" | "white-50" | undefined;
            'flex-row': boolean;
            'flex-row-reverse': boolean;
        }>;
        bodyClasses: import("vue").ComputedRef<{
            [x: string]: boolean | import("../types/ColorVariant").default | undefined;
            'card-body': boolean;
            'card-img-overlay': boolean;
        }>;
        footerClasses: import("vue").ComputedRef<{
            [x: string]: import("../types/ColorVariant").default | undefined;
        }>;
        headerClasses: import("vue").ComputedRef<{
            [x: string]: import("../types/ColorVariant").default | undefined;
        }>;
        imgClasses: import("vue").ComputedRef<{
            'card-img': boolean;
            'card-img-right': boolean;
            'card-img-left': boolean;
            'card-img-top': boolean;
            'card-img-bottom': boolean;
        }>;
        imgAttr: import("vue").ComputedRef<{
            src: string | undefined;
            alt: string | undefined;
            height: string | number | undefined;
            width: string | number | undefined;
        }>;
        subTitleClasses: import("vue").ComputedRef<{
            [x: string]: import("../types/TextColorVariant").default;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        align: {
            type: null;
            required: false;
        };
        bgVariant: {
            type: null;
            required: false;
        };
        bodyBgVariant: {
            type: null;
            required: false;
        };
        bodyClass: {
            type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
            required: false;
        };
        bodyTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        bodyTextVariant: {
            type: null;
            required: false;
        };
        borderVariant: {
            type: null;
            required: false;
        };
        footer: {
            type: StringConstructor;
            required: false;
        };
        footerBgVariant: {
            type: null;
            required: false;
        };
        footerBorderVariant: {
            type: null;
            required: false;
        };
        footerClass: {
            type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
            required: false;
        };
        footerHtml: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        footerTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        footerTextVariant: {
            type: null;
            required: false;
        };
        header: {
            type: StringConstructor;
            required: false;
        };
        headerBgVariant: {
            type: null;
            required: false;
        };
        headerBorderVariant: {
            type: null;
            required: false;
        };
        headerClass: {
            type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
            required: false;
        };
        headerHtml: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        headerTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        headerTextVariant: {
            type: null;
            required: false;
        };
        imgAlt: {
            type: StringConstructor;
            required: false;
        };
        imgBottom: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        imgEnd: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        imgHeight: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        imgLeft: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        imgRight: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        imgSrc: {
            type: StringConstructor;
            required: false;
        };
        imgStart: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        imgTop: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        imgWidth: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        noBody: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        overlay: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        subTitle: {
            type: StringConstructor;
            required: false;
        };
        subTitleTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        subTitleTextVariant: {
            type: null;
            required: false;
            default: string;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        textVariant: {
            type: null;
            required: false;
        };
        title: {
            type: StringConstructor;
            required: false;
        };
        titleTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }>>, {
        tag: string;
        overlay: boolean;
        bodyTag: string;
        footerHtml: string;
        footerTag: string;
        headerHtml: string;
        headerTag: string;
        imgBottom: boolean;
        imgEnd: boolean;
        imgLeft: boolean;
        imgRight: boolean;
        imgStart: boolean;
        imgTop: boolean;
        noBody: boolean;
        subTitleTag: string;
        subTitleTextVariant: any;
        titleTag: string;
    }>;
    BCardBody: import("vue").DefineComponent<{
        bodyBgVariant: {
            type: null;
            required: false;
        };
        bodyClass: {
            type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
            required: false;
        };
        bodyTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        bodyTextVariant: {
            type: null;
            required: false;
        };
        overlay: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        subTitle: {
            type: StringConstructor;
            required: false;
        };
        subTitleTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        subTitleTextVariant: {
            type: null;
            required: false;
        };
        title: {
            type: StringConstructor;
            required: false;
        };
        titleTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }, {
        props: {
            bodyBgVariant?: import("../types/ColorVariant").default | undefined;
            bodyClass?: string | unknown[] | Record<string, unknown> | undefined;
            bodyTag: string;
            bodyTextVariant?: import("../types/TextColorVariant").default | undefined;
            overlay: boolean;
            subTitle?: string | undefined;
            subTitleTag: string;
            subTitleTextVariant?: import("../types/TextColorVariant").default | undefined;
            title?: string | undefined;
            titleTag: string;
        };
        classes: import("vue").ComputedRef<{
            [x: string]: "info" | "primary" | "secondary" | "success" | "danger" | "warning" | "light" | "dark" | "white" | "reset" | "muted" | "body" | "black-50" | "white-50" | undefined;
        }>;
        BCardTitle: import("vue").DefineComponent<{
            title: {
                type: StringConstructor;
                required: false;
            };
            titleTag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
        }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            title: {
                type: StringConstructor;
                required: false;
            };
            titleTag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
        }>>, {
            titleTag: string;
        }>;
        BCardSubTitle: import("vue").DefineComponent<{
            subTitle: {
                type: StringConstructor;
                required: false;
            };
            subTitleTag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            subTitleTextVariant: {
                type: null;
                required: false;
                default: string;
            };
        }, {
            props: {
                subTitle?: string | undefined;
                subTitleTag: string;
                subTitleTextVariant: import("../types/TextColorVariant").default;
            };
            classes: import("vue").ComputedRef<{
                [x: string]: import("../types/TextColorVariant").default;
            }>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            subTitle: {
                type: StringConstructor;
                required: false;
            };
            subTitleTag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            subTitleTextVariant: {
                type: null;
                required: false;
                default: string;
            };
        }>>, {
            subTitleTag: string;
            subTitleTextVariant: any;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        bodyBgVariant: {
            type: null;
            required: false;
        };
        bodyClass: {
            type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
            required: false;
        };
        bodyTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        bodyTextVariant: {
            type: null;
            required: false;
        };
        overlay: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        subTitle: {
            type: StringConstructor;
            required: false;
        };
        subTitleTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        subTitleTextVariant: {
            type: null;
            required: false;
        };
        title: {
            type: StringConstructor;
            required: false;
        };
        titleTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }>>, {
        overlay: boolean;
        bodyTag: string;
        subTitleTag: string;
        titleTag: string;
    }>;
    BCardFooter: import("vue").DefineComponent<{
        footer: {
            type: StringConstructor;
            required: false;
        };
        footerBgVariant: {
            type: null;
            required: false;
        };
        footerBorderVariant: {
            type: null;
            required: false;
        };
        footerClass: {
            type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
            required: false;
        };
        footerHtml: {
            type: StringConstructor;
            required: false;
        };
        footerTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        footerTextVariant: {
            type: null;
            required: false;
        };
    }, {
        props: {
            footer?: string | undefined;
            footerBgVariant?: import("../types/ColorVariant").default | undefined;
            footerBorderVariant?: import("../types/ColorVariant").default | undefined;
            footerClass?: string | unknown[] | Record<string, unknown> | undefined;
            footerHtml?: string | undefined;
            footerTag: string;
            footerTextVariant?: import("../types/TextColorVariant").default | undefined;
        };
        classes: import("vue").ComputedRef<{
            [x: string]: "info" | "primary" | "secondary" | "success" | "danger" | "warning" | "light" | "dark" | "white" | "reset" | "muted" | "body" | "black-50" | "white-50" | undefined;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        footer: {
            type: StringConstructor;
            required: false;
        };
        footerBgVariant: {
            type: null;
            required: false;
        };
        footerBorderVariant: {
            type: null;
            required: false;
        };
        footerClass: {
            type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
            required: false;
        };
        footerHtml: {
            type: StringConstructor;
            required: false;
        };
        footerTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        footerTextVariant: {
            type: null;
            required: false;
        };
    }>>, {
        footerTag: string;
    }>;
    BCardGroup: import("vue").DefineComponent<{
        columns: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        deck: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }, {
        props: {
            columns: boolean;
            deck: boolean;
            tag: string;
        };
        classes: import("vue").ComputedRef<"card-deck" | "card-columns" | "card-group">;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        columns: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        deck: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }>>, {
        tag: string;
        columns: boolean;
        deck: boolean;
    }>;
    BCardHeader: import("vue").DefineComponent<{
        header: {
            type: StringConstructor;
            required: false;
        };
        headerBgVariant: {
            type: null;
            required: false;
        };
        headerBorderVariant: {
            type: null;
            required: false;
        };
        headerClass: {
            type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
            required: false;
        };
        headerHtml: {
            type: StringConstructor;
            required: false;
        };
        headerTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        headerTextVariant: {
            type: null;
            required: false;
        };
    }, {
        props: {
            header?: string | undefined;
            headerBgVariant?: import("../types/ColorVariant").default | undefined;
            headerBorderVariant?: import("../types/ColorVariant").default | undefined;
            headerClass?: string | unknown[] | Record<string, unknown> | undefined;
            headerHtml?: string | undefined;
            headerTag: string;
            headerTextVariant?: import("../types/ColorVariant").default | undefined;
        };
        classes: import("vue").ComputedRef<{
            [x: string]: import("../types/ColorVariant").default | undefined;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        header: {
            type: StringConstructor;
            required: false;
        };
        headerBgVariant: {
            type: null;
            required: false;
        };
        headerBorderVariant: {
            type: null;
            required: false;
        };
        headerClass: {
            type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
            required: false;
        };
        headerHtml: {
            type: StringConstructor;
            required: false;
        };
        headerTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        headerTextVariant: {
            type: null;
            required: false;
        };
    }>>, {
        headerTag: string;
    }>;
    BCardImg: import("vue").DefineComponent<{
        alt: {
            type: StringConstructor;
            required: false;
            default: undefined;
        };
        bottom: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        end: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        height: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        left: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        right: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        src: {
            type: StringConstructor;
            required: false;
        };
        start: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        top: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        width: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
    }, {
        props: {
            alt: string;
            bottom: boolean;
            end: boolean;
            height?: string | number | undefined;
            left: boolean;
            right: boolean;
            src?: string | undefined;
            start: boolean;
            top: boolean;
            width?: string | number | undefined;
        };
        attrs: import("vue").ComputedRef<{
            src: string | undefined;
            alt: string;
            width: number | undefined;
            height: number | undefined;
        }>;
        classes: import("vue").ComputedRef<{
            [x: string]: boolean;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        alt: {
            type: StringConstructor;
            required: false;
            default: undefined;
        };
        bottom: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        end: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        height: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        left: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        right: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        src: {
            type: StringConstructor;
            required: false;
        };
        start: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        top: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        width: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
    }>>, {
        alt: string;
        top: boolean;
        bottom: boolean;
        left: boolean;
        right: boolean;
        end: boolean;
        start: boolean;
    }>;
    BCardSubTitle: import("vue").DefineComponent<{
        subTitle: {
            type: StringConstructor;
            required: false;
        };
        subTitleTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        subTitleTextVariant: {
            type: null;
            required: false;
            default: string;
        };
    }, {
        props: {
            subTitle?: string | undefined;
            subTitleTag: string;
            subTitleTextVariant: import("../types/TextColorVariant").default;
        };
        classes: import("vue").ComputedRef<{
            [x: string]: import("../types/TextColorVariant").default;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        subTitle: {
            type: StringConstructor;
            required: false;
        };
        subTitleTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        subTitleTextVariant: {
            type: null;
            required: false;
            default: string;
        };
    }>>, {
        subTitleTag: string;
        subTitleTextVariant: any;
    }>;
    BCardText: import("vue").DefineComponent<{}, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>>, {}>;
    BCardTitle: import("vue").DefineComponent<{
        title: {
            type: StringConstructor;
            required: false;
        };
        titleTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        title: {
            type: StringConstructor;
            required: false;
        };
        titleTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }>>, {
        titleTag: string;
    }>;
    BCarousel: import("vue").DefineComponent<{
        id: {
            type: StringConstructor;
            required: false;
        };
        imgHeight: {
            type: StringConstructor;
            required: false;
        };
        imgWidth: {
            type: StringConstructor;
            required: false;
        };
        background: {
            type: StringConstructor;
            required: false;
        };
        modelValue: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        controls: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        indicators: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        interval: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        noTouch: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        noWrap: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
    }, {
        injectionKey: import("vue").InjectionKey<import("../types/components").BCarouselParentData>;
        props: {
            id?: string | undefined;
            imgHeight?: string | undefined;
            imgWidth?: string | undefined;
            background?: string | undefined;
            modelValue: number;
            controls: boolean;
            indicators: boolean;
            interval: number;
            noTouch: boolean;
            noWrap: boolean;
        };
        emit: {
            (e: "sliding-start", value: Event): void;
            (e: "sliding-end", value: Event): void;
        };
        slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        element: import("vue").Ref<HTMLElement | undefined>;
        instance: import("vue").Ref<import("bootstrap/js/dist/carousel").default | undefined>;
        computedId: import("vue").ComputedRef<string>;
        slides: import("vue").Ref<import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>[]>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("sliding-start" | "sliding-end")[], "sliding-start" | "sliding-end", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        id: {
            type: StringConstructor;
            required: false;
        };
        imgHeight: {
            type: StringConstructor;
            required: false;
        };
        imgWidth: {
            type: StringConstructor;
            required: false;
        };
        background: {
            type: StringConstructor;
            required: false;
        };
        modelValue: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        controls: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        indicators: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        interval: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        noTouch: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        noWrap: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
    }>> & {
        "onSliding-start"?: ((...args: any[]) => any) | undefined;
        "onSliding-end"?: ((...args: any[]) => any) | undefined;
    }, {
        modelValue: number;
        controls: boolean;
        indicators: boolean;
        interval: number;
        noTouch: boolean;
        noWrap: boolean;
    }>;
    BCarouselSlide: import("vue").DefineComponent<{
        imgSrc: {
            type: StringConstructor;
            required: false;
        };
        imgHeight: {
            type: StringConstructor;
            required: false;
        };
        imgWidth: {
            type: StringConstructor;
            required: false;
        };
        interval: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        active: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        background: {
            type: StringConstructor;
            required: false;
        };
        caption: {
            type: StringConstructor;
            required: false;
        };
        captionHtml: {
            type: StringConstructor;
            required: false;
        };
        captionTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        contentTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        contentVisibleUp: {
            type: StringConstructor;
            required: false;
        };
        id: {
            type: StringConstructor;
            required: false;
        };
        imgAlt: {
            type: StringConstructor;
            required: false;
        };
        imgBlank: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        imgBlankColor: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        text: {
            type: StringConstructor;
            required: false;
        };
        textHtml: {
            type: StringConstructor;
            required: false;
        };
        textTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }, {
        props: {
            imgSrc?: string | undefined;
            imgHeight?: string | undefined;
            imgWidth?: string | undefined;
            interval?: string | number | undefined;
            active: boolean;
            background?: string | undefined;
            caption?: string | undefined;
            captionHtml?: string | undefined;
            captionTag: string;
            contentTag: string;
            contentVisibleUp?: string | undefined;
            id?: string | undefined;
            imgAlt?: string | undefined;
            imgBlank: boolean;
            imgBlankColor: string;
            text?: string | undefined;
            textHtml?: string | undefined;
            textTag: string;
        };
        parentData: import("../types/components").BCarouselParentData;
        computedId: import("vue").ComputedRef<string>;
        img: import("vue").ComputedRef<string | true | undefined>;
        computedAttr: import("vue").ComputedRef<{
            background: string;
        }>;
        computedContentClasses: import("vue").ComputedRef<{
            [x: string]: string | undefined;
            'd-none': string | undefined;
        }>;
        showText: import("vue").ComputedRef<boolean | "" | undefined>;
        showTextAsHtml: import("vue").ComputedRef<string | undefined>;
        showCaption: import("vue").ComputedRef<boolean | "" | undefined>;
        showCaptionAsHtml: import("vue").ComputedRef<string | undefined>;
        parentWidth: import("vue").ComputedRef<string | undefined>;
        parentHeight: import("vue").ComputedRef<string | undefined>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        imgSrc: {
            type: StringConstructor;
            required: false;
        };
        imgHeight: {
            type: StringConstructor;
            required: false;
        };
        imgWidth: {
            type: StringConstructor;
            required: false;
        };
        interval: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        active: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        background: {
            type: StringConstructor;
            required: false;
        };
        caption: {
            type: StringConstructor;
            required: false;
        };
        captionHtml: {
            type: StringConstructor;
            required: false;
        };
        captionTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        contentTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        contentVisibleUp: {
            type: StringConstructor;
            required: false;
        };
        id: {
            type: StringConstructor;
            required: false;
        };
        imgAlt: {
            type: StringConstructor;
            required: false;
        };
        imgBlank: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        imgBlankColor: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        text: {
            type: StringConstructor;
            required: false;
        };
        textHtml: {
            type: StringConstructor;
            required: false;
        };
        textTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }>>, {
        active: boolean;
        captionTag: string;
        contentTag: string;
        imgBlank: boolean;
        imgBlankColor: string;
        textTag: string;
    }>;
    BCloseButton: import("vue").DefineComponent<{
        disabled: {
            type: null;
            required: false;
            default: boolean;
        };
        white: {
            type: null;
            required: false;
            default: boolean;
        };
    }, {
        props: {
            disabled: import("../types/Booleanish").default;
            white: import("../types/Booleanish").default;
        };
        disabledBoolean: import("vue").ComputedRef<boolean>;
        whiteBoolean: import("vue").ComputedRef<boolean>;
        classes: import("vue").ComputedRef<{
            'btn-close-white': boolean;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        disabled: {
            type: null;
            required: false;
            default: boolean;
        };
        white: {
            type: null;
            required: false;
            default: boolean;
        };
    }>>, {
        disabled: any;
        white: any;
    }>;
    BCol: import("vue").DefineComponent<{
        alignSelf: {
            type: import("vue").PropType<"auto" | import("../types/Alignment").default.Vertical>;
            default: null;
        };
        tag: {
            type: StringConstructor;
            default: string;
        };
        order: {
            type: (StringConstructor | NumberConstructor)[];
            default: null;
        };
        offset: {
            type: (StringConstructor | NumberConstructor)[];
            default: null;
        };
        col: {
            type: BooleanConstructor;
            default: boolean;
        };
        cols: {
            type: (StringConstructor | NumberConstructor)[];
            default: null;
        };
    }, {
        classes: import("vue").ComputedRef<{
            [x: string]: boolean;
            col: boolean;
        }>;
        classList: string[];
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        alignSelf: {
            type: import("vue").PropType<"auto" | import("../types/Alignment").default.Vertical>;
            default: null;
        };
        tag: {
            type: StringConstructor;
            default: string;
        };
        order: {
            type: (StringConstructor | NumberConstructor)[];
            default: null;
        };
        offset: {
            type: (StringConstructor | NumberConstructor)[];
            default: null;
        };
        col: {
            type: BooleanConstructor;
            default: boolean;
        };
        cols: {
            type: (StringConstructor | NumberConstructor)[];
            default: null;
        };
    }>>, {
        tag: string;
        alignSelf: "auto" | import("../types/Alignment").default.Vertical;
        order: string | number;
        offset: string | number;
        col: boolean;
        cols: string | number;
    }>;
    BCollapse: import("vue").DefineComponent<{
        accordion: {
            type: StringConstructor;
            required: false;
        };
        id: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        modelValue: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        toggle: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        visible: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        isNav: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
    }, {
        props: {
            accordion?: string | undefined;
            id: string;
            modelValue: boolean;
            tag: string;
            toggle: boolean;
            visible: boolean;
            isNav: boolean;
        };
        emit: {
            (e: "update:modelValue", value: boolean): void;
            (e: "show"): void;
            (e: "shown"): void;
            (e: "hide"): void;
            (e: "hidden"): void;
        };
        element: import("vue").Ref<HTMLElement | undefined>;
        instance: import("vue").Ref<import("bootstrap/js/dist/collapse").default | undefined>;
        classes: import("vue").ComputedRef<{
            show: boolean;
            'navbar-collapse': boolean;
        }>;
        close: () => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "show" | "shown" | "hide" | "hidden")[], "update:modelValue" | "show" | "shown" | "hide" | "hidden", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        accordion: {
            type: StringConstructor;
            required: false;
        };
        id: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        modelValue: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        toggle: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        visible: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        isNav: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onShow?: ((...args: any[]) => any) | undefined;
        onShown?: ((...args: any[]) => any) | undefined;
        onHide?: ((...args: any[]) => any) | undefined;
        onHidden?: ((...args: any[]) => any) | undefined;
    }, {
        id: string;
        visible: boolean;
        modelValue: boolean;
        tag: string;
        toggle: boolean;
        isNav: boolean;
    }>;
    BContainer: import("vue").DefineComponent<{
        gutterX: {
            type: StringConstructor;
            default: null;
        };
        gutterY: {
            type: StringConstructor;
            default: null;
        };
        fluid: {
            type: import("vue").PropType<boolean | import("../types/Breakpoint").default>;
            default: boolean;
        };
        toast: {
            type: ObjectConstructor;
        };
        position: {
            type: import("vue").PropType<import("../types/Position").default>;
            required: false;
        };
    }, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        gutterX: {
            type: StringConstructor;
            default: null;
        };
        gutterY: {
            type: StringConstructor;
            default: null;
        };
        fluid: {
            type: import("vue").PropType<boolean | import("../types/Breakpoint").default>;
            default: boolean;
        };
        toast: {
            type: ObjectConstructor;
        };
        position: {
            type: import("vue").PropType<import("../types/Position").default>;
            required: false;
        };
    }>>, {
        gutterX: string;
        gutterY: string;
        fluid: boolean | import("../types/Breakpoint").default;
    }>;
    BDropdown: import("vue").DefineComponent<{
        id: {
            type: StringConstructor;
            required: false;
        };
        menuClass: {
            type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
            required: false;
        };
        size: {
            type: null;
            required: false;
        };
        splitClass: {
            type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
            required: false;
        };
        splitVariant: {
            type: null;
            required: false;
        };
        text: {
            type: StringConstructor;
            required: false;
        };
        toggleClass: {
            type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
            required: false;
        };
        autoClose: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        block: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        boundary: {
            type: null;
            required: false;
            default: string;
        };
        dark: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        dropup: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        dropright: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        dropleft: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        noFlip: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        offset: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
            default: number;
        };
        popperOpts: {
            type: ObjectConstructor;
            required: false;
            default: () => {};
        };
        right: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        role: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        split: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        splitButtonType: {
            type: null;
            required: false;
            default: string;
        };
        splitHref: {
            type: StringConstructor;
            required: false;
            default: undefined;
        };
        noCaret: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        toggleText: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        variant: {
            type: null;
            required: false;
            default: string;
        };
    }, {
        props: {
            id?: string | undefined;
            menuClass?: string | unknown[] | Record<string, unknown> | undefined;
            size?: import("../types/Size").default;
            splitClass?: string | unknown[] | Record<string, unknown> | undefined;
            splitVariant?: import("../types/ButtonVariant").default | undefined;
            text?: string | undefined;
            toggleClass?: string | unknown[] | Record<string, unknown> | undefined;
            autoClose: boolean | "inside" | "outside";
            block: boolean;
            boundary: import("@popperjs/core").Boundary;
            dark: boolean;
            disabled: boolean;
            dropup: boolean;
            dropright: boolean;
            dropleft: boolean;
            noFlip: boolean;
            offset: string | number;
            popperOpts: Record<string, unknown>;
            right: boolean;
            role: string;
            split: boolean;
            splitButtonType: import("../types/ButtonType").default;
            splitHref: string;
            noCaret: boolean;
            toggleText: string;
            variant: import("../types/ButtonVariant").default;
        };
        emit: {
            (e: "show"): void;
            (e: "shown"): void;
            (e: "hide"): void;
            (e: "hidden"): void;
            (e: "click", event: Event): void;
            (e: "toggle"): void;
        };
        parent: import("vue").Ref<HTMLElement | undefined>;
        dropdown: import("vue").Ref<import("vue").ComponentPublicInstance<HTMLElement, {}, {}, {}, {}, {}, HTMLElement, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | undefined>;
        instance: import("vue").Ref<import("bootstrap/js/dist/dropdown").default | undefined>;
        computedId: import("vue").ComputedRef<string>;
        onSplitClick: (event: Event) => void;
        classes: import("vue").ComputedRef<{
            'd-grid': boolean;
            'd-flex': boolean;
        }>;
        buttonClasses: import("vue").ComputedRef<{
            'dropdown-toggle': boolean;
            'dropdown-toggle-no-caret': boolean;
            'w-100': boolean;
        }>;
        dropdownMenuClasses: import("vue").ComputedRef<{
            'dropdown-menu-dark': boolean;
            'dropdown-menu-right': boolean;
        }>;
        buttonAttr: import("vue").ComputedRef<{
            'data-bs-toggle': string | undefined;
            'aria-expanded': boolean | undefined;
            ref: import("vue").Ref<import("vue").ComponentPublicInstance<HTMLElement, {}, {}, {}, {}, {}, HTMLElement, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | undefined> | undefined;
            href: string | undefined;
        }>;
        splitAttr: import("vue").ComputedRef<{
            ref: import("vue").Ref<import("vue").ComponentPublicInstance<HTMLElement, {}, {}, {}, {}, {}, HTMLElement, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | undefined> | undefined;
        }>;
        hide: () => void;
        BButton: import("vue").DefineComponent<{
            active: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            disabled: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            href: {
                type: StringConstructor;
                required: false;
            };
            pill: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            pressed: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: null;
            };
            rel: {
                type: StringConstructor;
                default: null;
            };
            size: {
                type: import("vue").PropType<import("../types/InputSize").default>;
            };
            squared: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            tag: {
                type: StringConstructor;
                default: string;
            };
            target: {
                type: import("vue").PropType<import("../types/LinkTarget").default>;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            variant: {
                type: import("vue").PropType<import("../types/ButtonVariant").default>;
                default: string;
            };
            activeClass: {
                type: StringConstructor;
                default: string;
            };
            append: {
                type: BooleanConstructor;
                default: boolean;
            };
            event: {
                type: (StringConstructor | ArrayConstructor)[];
                default: string;
            };
            exact: {
                type: BooleanConstructor;
                default: boolean;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: string;
            };
            replace: {
                type: BooleanConstructor;
                default: boolean;
            };
            routerComponentName: {
                type: StringConstructor;
                default: string;
            };
            routerTag: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
                default: null;
            };
        }, {
            classes: import("vue").ComputedRef<{
                [x: string]: boolean | import("../types/InputSize").default | import("../types/ButtonVariant").default | undefined;
                active: boolean;
                'rounded-pill': boolean;
                'rounded-0': boolean;
                disabled: boolean;
            }>;
            attrs: import("vue").ComputedRef<{
                'aria-disabled': string | null;
                'aria-pressed': string | null;
                autocomplete: string | null;
                disabled: boolean | null;
                href: string | undefined;
                rel: string | null;
                role: string | null;
                target: import("../types/LinkTarget").default | null;
                type: string | null;
                to: import("vue-router").RouteLocationRaw | null;
                append: boolean | null;
                activeClass: string | null;
                event: string | unknown[] | null;
                exact: boolean | null;
                exactActiveClass: string | null;
                replace: boolean | null;
                routerComponentName: string | null;
                routerTag: string | null;
            }>;
            computedTag: import("vue").ComputedRef<string>;
            clicked: (e: MouseEvent) => void;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click" | "update:pressed")[], "click" | "update:pressed", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            active: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            disabled: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            href: {
                type: StringConstructor;
                required: false;
            };
            pill: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            pressed: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: null;
            };
            rel: {
                type: StringConstructor;
                default: null;
            };
            size: {
                type: import("vue").PropType<import("../types/InputSize").default>;
            };
            squared: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            tag: {
                type: StringConstructor;
                default: string;
            };
            target: {
                type: import("vue").PropType<import("../types/LinkTarget").default>;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            variant: {
                type: import("vue").PropType<import("../types/ButtonVariant").default>;
                default: string;
            };
            activeClass: {
                type: StringConstructor;
                default: string;
            };
            append: {
                type: BooleanConstructor;
                default: boolean;
            };
            event: {
                type: (StringConstructor | ArrayConstructor)[];
                default: string;
            };
            exact: {
                type: BooleanConstructor;
                default: boolean;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: string;
            };
            replace: {
                type: BooleanConstructor;
                default: boolean;
            };
            routerComponentName: {
                type: StringConstructor;
                default: string;
            };
            routerTag: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
                default: null;
            };
        }>> & {
            onClick?: ((...args: any[]) => any) | undefined;
            "onUpdate:pressed"?: ((...args: any[]) => any) | undefined;
        }, {
            replace: boolean;
            type: string;
            tag: string;
            variant: import("../types/ButtonVariant").default;
            disabled: import("../types/Booleanish").default;
            exact: boolean;
            active: import("../types/Booleanish").default;
            pill: import("../types/Booleanish").default;
            to: import("vue-router").RouteLocationRaw;
            event: string | unknown[];
            routerTag: string;
            pressed: import("../types/Booleanish").default;
            rel: string;
            squared: import("../types/Booleanish").default;
            target: import("../types/LinkTarget").default;
            activeClass: string;
            append: boolean;
            exactActiveClass: string;
            routerComponentName: string;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("show" | "shown" | "hide" | "hidden" | "click" | "toggle")[], "show" | "shown" | "hide" | "hidden" | "toggle" | "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        id: {
            type: StringConstructor;
            required: false;
        };
        menuClass: {
            type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
            required: false;
        };
        size: {
            type: null;
            required: false;
        };
        splitClass: {
            type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
            required: false;
        };
        splitVariant: {
            type: null;
            required: false;
        };
        text: {
            type: StringConstructor;
            required: false;
        };
        toggleClass: {
            type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
            required: false;
        };
        autoClose: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        block: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        boundary: {
            type: null;
            required: false;
            default: string;
        };
        dark: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        dropup: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        dropright: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        dropleft: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        noFlip: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        offset: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
            default: number;
        };
        popperOpts: {
            type: ObjectConstructor;
            required: false;
            default: () => {};
        };
        right: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        role: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        split: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        splitButtonType: {
            type: null;
            required: false;
            default: string;
        };
        splitHref: {
            type: StringConstructor;
            required: false;
            default: undefined;
        };
        noCaret: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        toggleText: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        variant: {
            type: null;
            required: false;
            default: string;
        };
    }>> & {
        onShow?: ((...args: any[]) => any) | undefined;
        onShown?: ((...args: any[]) => any) | undefined;
        onHide?: ((...args: any[]) => any) | undefined;
        onHidden?: ((...args: any[]) => any) | undefined;
        onClick?: ((...args: any[]) => any) | undefined;
        onToggle?: ((...args: any[]) => any) | undefined;
    }, {
        split: boolean;
        variant: any;
        dark: boolean;
        disabled: boolean;
        right: boolean;
        block: boolean;
        offset: string | number;
        autoClose: string | boolean;
        boundary: any;
        dropup: boolean;
        dropright: boolean;
        dropleft: boolean;
        noFlip: boolean;
        popperOpts: Record<string, any>;
        role: string;
        splitButtonType: any;
        splitHref: string;
        noCaret: boolean;
        toggleText: string;
    }>;
    BDropdownDivider: import("vue").DefineComponent<{
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }>>, {
        tag: string;
    }>;
    BDropdownForm: import("vue").DefineComponent<{}, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>>, {}>;
    BDropdownGroup: import("vue").DefineComponent<{
        id: {
            type: StringConstructor;
            required: false;
        };
        ariaDescribedby: {
            type: StringConstructor;
            required: false;
        };
        header: {
            type: StringConstructor;
            required: false;
        };
        headerClasses: {
            type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
            required: false;
            default: undefined;
        };
        headerTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        headerVariant: {
            type: null;
            required: false;
            default: undefined;
        };
    }, {
        props: {
            id?: string | undefined;
            ariaDescribedby?: string | undefined;
            header?: string | undefined;
            headerClasses: string | unknown[] | Record<string, unknown>;
            headerTag: string;
            headerVariant: import("../types/ColorVariant").default;
        };
        headerId: import("vue").ComputedRef<string | undefined>;
        headerRole: import("vue").ComputedRef<"heading" | undefined>;
        classes: import("vue").ComputedRef<{
            [x: string]: import("../types/ColorVariant").default;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        id: {
            type: StringConstructor;
            required: false;
        };
        ariaDescribedby: {
            type: StringConstructor;
            required: false;
        };
        header: {
            type: StringConstructor;
            required: false;
        };
        headerClasses: {
            type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
            required: false;
            default: undefined;
        };
        headerTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        headerVariant: {
            type: null;
            required: false;
            default: undefined;
        };
    }>>, {
        headerTag: string;
        headerClasses: string | unknown[] | Record<string, any>;
        headerVariant: any;
    }>;
    BDropdownHeader: import("vue").DefineComponent<{}, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>>, {}>;
    BDropdownItem: import("vue").DefineComponent<{
        href: {
            type: StringConstructor;
            required: false;
        };
        linkClass: {
            type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
            required: false;
        };
        active: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        rel: {
            type: StringConstructor;
            required: false;
            default: undefined;
        };
        target: {
            type: null;
            required: false;
            default: string;
        };
        variant: {
            type: null;
            required: false;
            default: undefined;
        };
    }, {
        props: {
            href?: string | undefined;
            linkClass?: string | unknown[] | Record<string, unknown> | undefined;
            active: boolean;
            disabled: boolean;
            rel: string;
            target: import("../types/LinkTarget").default;
            variant: import("../types/ColorVariant").default;
        };
        emit: (e: "click", value: MouseEvent) => void;
        attrs: {
            [x: string]: unknown;
        };
        classes: import("vue").ComputedRef<{
            [x: string]: boolean | import("../types/ColorVariant").default;
            active: boolean;
            disabled: boolean;
        }>;
        tag: import("vue").ComputedRef<"button" | "b-link" | "a">;
        componentAttrs: import("vue").ComputedRef<{
            activeClass?: string | undefined;
            'aria-current': string | null;
            href: string | null | undefined;
            rel: string;
            type: string | null;
            target: import("../types/LinkTarget").default;
        }>;
        clicked: (e: MouseEvent) => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        href: {
            type: StringConstructor;
            required: false;
        };
        linkClass: {
            type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
            required: false;
        };
        active: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        rel: {
            type: StringConstructor;
            required: false;
            default: undefined;
        };
        target: {
            type: null;
            required: false;
            default: string;
        };
        variant: {
            type: null;
            required: false;
            default: undefined;
        };
    }>> & {
        onClick?: ((...args: any[]) => any) | undefined;
    }, {
        variant: any;
        disabled: boolean;
        active: boolean;
        rel: string;
        target: any;
    }>;
    BDropdownItemButton: import("vue").DefineComponent<{
        buttonClass: {
            type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
            required: false;
        };
        active: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        activeClass: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        disabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        variant: {
            type: null;
            required: false;
            default: undefined;
        };
    }, {
        props: {
            buttonClass?: string | unknown[] | Record<string, unknown> | undefined;
            active: boolean;
            activeClass: string;
            disabled: boolean;
            variant: import("../types/ColorVariant").default;
        };
        emit: (e: "click", value: MouseEvent) => void;
        classes: import("vue").ComputedRef<{
            [x: string]: boolean | import("../types/ColorVariant").default;
            disabled: boolean;
        }>;
        attrs: import("vue").ComputedRef<{
            role: string;
            type: import("../types/ButtonType").default;
            disabled: boolean;
        }>;
        clicked: (e: MouseEvent) => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        buttonClass: {
            type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
            required: false;
        };
        active: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        activeClass: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        disabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        variant: {
            type: null;
            required: false;
            default: undefined;
        };
    }>> & {
        onClick?: ((...args: any[]) => any) | undefined;
    }, {
        variant: any;
        disabled: boolean;
        active: boolean;
        activeClass: string;
    }>;
    BDropdownText: import("vue").DefineComponent<{}, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>>, {}>;
    BForm: import("vue").DefineComponent<{
        id: {
            type: StringConstructor;
            required: false;
        };
        floating: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        novalidate: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        validated: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
    }, {
        props: {
            id?: string | undefined;
            floating: boolean;
            novalidate: boolean;
            validated: boolean;
        };
        emit: (e: "submit", value: Event) => void;
        classes: import("vue").ComputedRef<{
            'form-floating': boolean;
            'was-validated': boolean;
        }>;
        submitted: (e: Event) => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "submit"[], "submit", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        id: {
            type: StringConstructor;
            required: false;
        };
        floating: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        novalidate: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        validated: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
    }>> & {
        onSubmit?: ((...args: any[]) => any) | undefined;
    }, {
        floating: boolean;
        novalidate: boolean;
        validated: boolean;
    }>;
    BFormCheckbox: import("vue").DefineComponent<{
        ariaLabel: {
            type: StringConstructor;
            required: false;
        };
        ariaLabelledBy: {
            type: StringConstructor;
            required: false;
        };
        form: {
            type: StringConstructor;
            required: false;
        };
        indeterminate: {
            type: BooleanConstructor;
            required: false;
        };
        name: {
            type: StringConstructor;
            required: false;
        };
        id: {
            type: StringConstructor;
            required: false;
            default: undefined;
        };
        autofocus: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        plain: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        button: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        switch: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        buttonVariant: {
            type: null;
            required: false;
            default: string;
        };
        inline: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        required: {
            type: BooleanConstructor;
            required: false;
            default: undefined;
        };
        size: {
            type: null;
            required: false;
            default: string;
        };
        state: {
            type: BooleanConstructor;
            required: false;
            default: undefined;
        };
        uncheckedValue: {
            type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor | ArrayConstructor | SetConstructor)[];
            required: false;
            default: boolean;
        };
        value: {
            type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor | ArrayConstructor | SetConstructor)[];
            required: false;
            default: boolean;
        };
        modelValue: {
            type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor | ArrayConstructor | SetConstructor)[];
            required: false;
            default: undefined;
        };
    }, {
        props: {
            ariaLabel?: string | undefined;
            ariaLabelledBy?: string | undefined;
            form?: string | undefined;
            indeterminate?: boolean | undefined;
            name?: string | undefined;
            id: string;
            autofocus: boolean;
            plain: boolean;
            button: boolean;
            switch: boolean;
            disabled: boolean;
            buttonVariant: import("../types/ButtonVariant").default;
            inline: boolean;
            required: boolean;
            size: import("../types/InputSize").default;
            state: boolean;
            uncheckedValue: string | number | boolean | unknown[] | Set<unknown> | Record<string, unknown>;
            value: string | number | boolean | unknown[] | Set<unknown> | Record<string, unknown>;
            modelValue: string | number | boolean | unknown[] | Set<unknown> | Record<string, unknown>;
        };
        emit: {
            (e: "update:modelValue", value: unknown): void;
            (e: "input", value: unknown): void;
            (e: "change", value: unknown): void;
        };
        computedId: import("vue").ComputedRef<string>;
        input: import("vue").Ref<HTMLElement>;
        isFocused: import("vue").Ref<boolean>;
        localValue: import("vue").WritableComputedRef<boolean | unknown[] | Set<unknown> | undefined>;
        isChecked: import("vue").ComputedRef<boolean>;
        classes: import("vue").ComputedRef<any>;
        inputClasses: import("vue").ComputedRef<any>;
        labelClasses: import("vue").ComputedRef<any>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "input" | "change")[], "update:modelValue" | "input" | "change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        ariaLabel: {
            type: StringConstructor;
            required: false;
        };
        ariaLabelledBy: {
            type: StringConstructor;
            required: false;
        };
        form: {
            type: StringConstructor;
            required: false;
        };
        indeterminate: {
            type: BooleanConstructor;
            required: false;
        };
        name: {
            type: StringConstructor;
            required: false;
        };
        id: {
            type: StringConstructor;
            required: false;
            default: undefined;
        };
        autofocus: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        plain: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        button: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        switch: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        buttonVariant: {
            type: null;
            required: false;
            default: string;
        };
        inline: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        required: {
            type: BooleanConstructor;
            required: false;
            default: undefined;
        };
        size: {
            type: null;
            required: false;
            default: string;
        };
        state: {
            type: BooleanConstructor;
            required: false;
            default: undefined;
        };
        uncheckedValue: {
            type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor | ArrayConstructor | SetConstructor)[];
            required: false;
            default: boolean;
        };
        value: {
            type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor | ArrayConstructor | SetConstructor)[];
            required: false;
            default: boolean;
        };
        modelValue: {
            type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor | ArrayConstructor | SetConstructor)[];
            required: false;
            default: undefined;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onInput?: ((...args: any[]) => any) | undefined;
        onChange?: ((...args: any[]) => any) | undefined;
    }, {
        id: string;
        required: boolean;
        modelValue: string | number | boolean | unknown[] | Record<string, any> | Set<unknown>;
        button: boolean;
        disabled: boolean;
        size: any;
        inline: boolean;
        value: string | number | boolean | unknown[] | Record<string, any> | Set<unknown>;
        state: boolean;
        indeterminate: boolean;
        autofocus: boolean;
        plain: boolean;
        switch: boolean;
        buttonVariant: any;
        uncheckedValue: string | number | boolean | unknown[] | Record<string, any> | Set<unknown>;
    }>;
    BFormCheckboxGroup: import("vue").DefineComponent<{
        id: {
            type: StringConstructor;
            required: false;
        };
        form: {
            type: StringConstructor;
            required: false;
        };
        modelValue: {
            type: ArrayConstructor;
            required: false;
            default: () => never[];
        };
        ariaInvalid: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: undefined;
        };
        autofocus: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        buttonVariant: {
            type: null;
            required: false;
            default: string;
        };
        buttons: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        disabledField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        htmlField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        name: {
            type: StringConstructor;
            required: false;
        };
        options: {
            type: ArrayConstructor;
            required: false;
            default: () => never[];
        };
        plain: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        required: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        size: {
            type: null;
            required: false;
        };
        stacked: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        state: {
            type: BooleanConstructor;
            required: false;
            default: undefined;
        };
        switches: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        textField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        validated: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        valueField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }, {
        props: {
            id?: string | undefined;
            form?: string | undefined;
            modelValue: unknown[];
            ariaInvalid: string | boolean;
            autofocus: boolean;
            buttonVariant: import("../types/ButtonVariant").default;
            buttons: boolean;
            disabled: boolean;
            disabledField: string;
            htmlField: string;
            name?: string | undefined;
            options: unknown[];
            plain: boolean;
            required: boolean;
            size?: import("../types/Size").default;
            stacked: boolean;
            state: boolean;
            switches: boolean;
            textField: string;
            validated: boolean;
            valueField: string;
        };
        emit: {
            (e: "input", value: unknown): void;
            (e: "update:modelValue", value: unknown): void;
            (e: "change", value: unknown): void;
        };
        slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        slotsName: string;
        computedId: import("vue").ComputedRef<string>;
        computedName: import("vue").ComputedRef<string>;
        localValue: import("vue").WritableComputedRef<unknown[]>;
        checkboxList: import("vue").ComputedRef<any[]>;
        attrs: import("vue").ComputedRef<any>;
        classes: import("vue").ComputedRef<any>;
        BFormCheckbox: import("vue").DefineComponent<{
            ariaLabel: {
                type: StringConstructor;
                required: false;
            };
            ariaLabelledBy: {
                type: StringConstructor;
                required: false;
            };
            form: {
                type: StringConstructor;
                required: false;
            };
            indeterminate: {
                type: BooleanConstructor;
                required: false;
            };
            name: {
                type: StringConstructor;
                required: false;
            };
            id: {
                type: StringConstructor;
                required: false;
                default: undefined;
            };
            autofocus: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            plain: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            button: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            switch: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            buttonVariant: {
                type: null;
                required: false;
                default: string;
            };
            inline: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            required: {
                type: BooleanConstructor;
                required: false;
                default: undefined;
            };
            size: {
                type: null;
                required: false;
                default: string;
            };
            state: {
                type: BooleanConstructor;
                required: false;
                default: undefined;
            };
            uncheckedValue: {
                type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor | ArrayConstructor | SetConstructor)[];
                required: false;
                default: boolean;
            };
            value: {
                type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor | ArrayConstructor | SetConstructor)[];
                required: false;
                default: boolean;
            };
            modelValue: {
                type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor | ArrayConstructor | SetConstructor)[];
                required: false;
                default: undefined;
            };
        }, {
            props: {
                ariaLabel?: string | undefined;
                ariaLabelledBy?: string | undefined;
                form?: string | undefined;
                indeterminate?: boolean | undefined;
                name?: string | undefined;
                id: string;
                autofocus: boolean;
                plain: boolean;
                button: boolean;
                switch: boolean;
                disabled: boolean;
                buttonVariant: import("../types/ButtonVariant").default;
                inline: boolean;
                required: boolean;
                size: import("../types/InputSize").default;
                state: boolean;
                uncheckedValue: string | number | boolean | unknown[] | Set<unknown> | Record<string, unknown>;
                value: string | number | boolean | unknown[] | Set<unknown> | Record<string, unknown>;
                modelValue: string | number | boolean | unknown[] | Set<unknown> | Record<string, unknown>;
            };
            emit: {
                (e: "update:modelValue", value: unknown): void;
                (e: "input", value: unknown): void;
                (e: "change", value: unknown): void;
            };
            computedId: import("vue").ComputedRef<string>;
            input: import("vue").Ref<HTMLElement>;
            isFocused: import("vue").Ref<boolean>;
            localValue: import("vue").WritableComputedRef<boolean | unknown[] | Set<unknown> | undefined>;
            isChecked: import("vue").ComputedRef<boolean>;
            classes: import("vue").ComputedRef<any>;
            inputClasses: import("vue").ComputedRef<any>;
            labelClasses: import("vue").ComputedRef<any>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "input" | "change")[], "update:modelValue" | "input" | "change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            ariaLabel: {
                type: StringConstructor;
                required: false;
            };
            ariaLabelledBy: {
                type: StringConstructor;
                required: false;
            };
            form: {
                type: StringConstructor;
                required: false;
            };
            indeterminate: {
                type: BooleanConstructor;
                required: false;
            };
            name: {
                type: StringConstructor;
                required: false;
            };
            id: {
                type: StringConstructor;
                required: false;
                default: undefined;
            };
            autofocus: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            plain: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            button: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            switch: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            buttonVariant: {
                type: null;
                required: false;
                default: string;
            };
            inline: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            required: {
                type: BooleanConstructor;
                required: false;
                default: undefined;
            };
            size: {
                type: null;
                required: false;
                default: string;
            };
            state: {
                type: BooleanConstructor;
                required: false;
                default: undefined;
            };
            uncheckedValue: {
                type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor | ArrayConstructor | SetConstructor)[];
                required: false;
                default: boolean;
            };
            value: {
                type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor | ArrayConstructor | SetConstructor)[];
                required: false;
                default: boolean;
            };
            modelValue: {
                type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor | ArrayConstructor | SetConstructor)[];
                required: false;
                default: undefined;
            };
        }>> & {
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
            onInput?: ((...args: any[]) => any) | undefined;
            onChange?: ((...args: any[]) => any) | undefined;
        }, {
            id: string;
            required: boolean;
            modelValue: string | number | boolean | unknown[] | Record<string, any> | Set<unknown>;
            button: boolean;
            disabled: boolean;
            size: any;
            inline: boolean;
            value: string | number | boolean | unknown[] | Record<string, any> | Set<unknown>;
            state: boolean;
            indeterminate: boolean;
            autofocus: boolean;
            plain: boolean;
            switch: boolean;
            buttonVariant: any;
            uncheckedValue: string | number | boolean | unknown[] | Record<string, any> | Set<unknown>;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "input" | "change")[], "update:modelValue" | "input" | "change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        id: {
            type: StringConstructor;
            required: false;
        };
        form: {
            type: StringConstructor;
            required: false;
        };
        modelValue: {
            type: ArrayConstructor;
            required: false;
            default: () => never[];
        };
        ariaInvalid: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: undefined;
        };
        autofocus: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        buttonVariant: {
            type: null;
            required: false;
            default: string;
        };
        buttons: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        disabledField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        htmlField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        name: {
            type: StringConstructor;
            required: false;
        };
        options: {
            type: ArrayConstructor;
            required: false;
            default: () => never[];
        };
        plain: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        required: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        size: {
            type: null;
            required: false;
        };
        stacked: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        state: {
            type: BooleanConstructor;
            required: false;
            default: undefined;
        };
        switches: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        textField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        validated: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        valueField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onInput?: ((...args: any[]) => any) | undefined;
        onChange?: ((...args: any[]) => any) | undefined;
    }, {
        required: boolean;
        modelValue: unknown[];
        disabled: boolean;
        validated: boolean;
        state: boolean;
        autofocus: boolean;
        plain: boolean;
        buttonVariant: any;
        ariaInvalid: string | boolean;
        buttons: boolean;
        disabledField: string;
        htmlField: string;
        options: unknown[];
        stacked: boolean;
        switches: boolean;
        textField: string;
        valueField: string;
    }>;
    BFormFloatingLabel: import("vue").DefineComponent<{
        labelFor: {
            type: StringConstructor;
            required: false;
        };
        label: {
            type: StringConstructor;
            required: false;
        };
    }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        labelFor: {
            type: StringConstructor;
            required: false;
        };
        label: {
            type: StringConstructor;
            required: false;
        };
    }>>, {}>;
    BFormGroup: import("vue").DefineComponent<{
        contentCols: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        contentColsLg: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        contentColsMd: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        contentColsSm: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        contentColsXl: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        description: {
            type: StringConstructor[];
            required: false;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        feedbackAriaLive: {
            type: StringConstructor;
            default: string;
        };
        id: {
            type: StringConstructor;
            required: false;
        };
        invalidFeedback: {
            type: StringConstructor;
            required: false;
        };
        label: {
            type: StringConstructor;
            required: false;
        };
        labelAlign: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        labelAlignLg: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        labelAlignMd: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        labelAlignSm: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        labelAlignXl: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        labelClass: {
            type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
            required: false;
        };
        labelCols: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        labelColsLg: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        labelColsMd: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        labelColsSm: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        labelColsXl: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        labelFor: {
            type: StringConstructor;
            required: false;
        };
        labelSize: {
            type: StringConstructor;
            required: false;
        };
        labelSrOnly: {
            type: BooleanConstructor;
            default: boolean;
        };
        state: {
            type: BooleanConstructor;
            default: null;
        };
        tooltip: {
            type: BooleanConstructor;
            default: boolean;
        };
        validFeedback: {
            type: StringConstructor;
            required: false;
        };
        validated: {
            type: BooleanConstructor;
            default: boolean;
        };
        floating: {
            type: BooleanConstructor;
            default: boolean;
        };
    }, {
        ariaDescribedby: string | null;
        computedAriaInvalid: import("vue").ComputedRef<unknown>;
        contentColProps: import("vue").ComputedRef<any>;
        isHorizontal: import("vue").ComputedRef<boolean>;
        labelAlignClasses: import("vue").ComputedRef<string[]>;
        labelColProps: import("vue").ComputedRef<any>;
        onLegendClick: (event: MouseEvent) => void;
        stateClass: import("vue").ComputedRef<"is-valid" | "is-invalid" | null>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        contentCols: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        contentColsLg: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        contentColsMd: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        contentColsSm: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        contentColsXl: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        description: {
            type: StringConstructor[];
            required: false;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        feedbackAriaLive: {
            type: StringConstructor;
            default: string;
        };
        id: {
            type: StringConstructor;
            required: false;
        };
        invalidFeedback: {
            type: StringConstructor;
            required: false;
        };
        label: {
            type: StringConstructor;
            required: false;
        };
        labelAlign: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        labelAlignLg: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        labelAlignMd: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        labelAlignSm: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        labelAlignXl: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        labelClass: {
            type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
            required: false;
        };
        labelCols: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        labelColsLg: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        labelColsMd: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        labelColsSm: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        labelColsXl: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        labelFor: {
            type: StringConstructor;
            required: false;
        };
        labelSize: {
            type: StringConstructor;
            required: false;
        };
        labelSrOnly: {
            type: BooleanConstructor;
            default: boolean;
        };
        state: {
            type: BooleanConstructor;
            default: null;
        };
        tooltip: {
            type: BooleanConstructor;
            default: boolean;
        };
        validFeedback: {
            type: StringConstructor;
            required: false;
        };
        validated: {
            type: BooleanConstructor;
            default: boolean;
        };
        floating: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>>, {
        disabled: boolean;
        tooltip: boolean;
        floating: boolean;
        validated: boolean;
        state: boolean;
        feedbackAriaLive: string;
        labelSrOnly: boolean;
    }>;
    BFormInput: import("vue").DefineComponent<{
        max: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        min: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        step: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        type: {
            type: import("vue").PropType<import("../types/InputType").default>;
            default: string;
            validator: (value: string) => boolean;
        };
        ariaInvalid: {
            type: import("vue").PropType<boolean | "grammar" | "spelling" | undefined>;
            default: boolean;
        };
        autocomplete: {
            type: StringConstructor;
            required: boolean;
        };
        autofocus: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        form: {
            type: StringConstructor;
            required: boolean;
        };
        formatter: {
            type: FunctionConstructor;
            required: boolean;
        };
        id: {
            type: StringConstructor;
            required: boolean;
        };
        lazy: {
            type: BooleanConstructor;
            default: boolean;
        };
        lazyFormatter: {
            type: BooleanConstructor;
            default: boolean;
        };
        list: {
            type: StringConstructor;
            required: boolean;
        };
        modelValue: {
            type: import("vue").PropType<string | number>;
            default: string;
        };
        name: {
            type: StringConstructor;
            required: boolean;
        };
        number: {
            type: BooleanConstructor;
            default: boolean;
        };
        placeholder: {
            type: StringConstructor;
            required: boolean;
        };
        plaintext: {
            type: BooleanConstructor;
            default: boolean;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        required: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("../types/Size").default>;
            required: boolean;
        };
        state: {
            type: import("vue").PropType<boolean | null | undefined>;
            default: null;
        };
        trim: {
            type: BooleanConstructor;
            default: boolean;
        };
    }, {
        classes: import("vue").ComputedRef<{
            [x: string]: boolean | import("../types/Size").default;
            'form-range': boolean;
            'form-control': boolean;
            'form-control-color': boolean;
            'form-control-plaintext': boolean;
            'is-valid': boolean;
            'is-invalid': boolean;
        }>;
        localType: import("vue").ComputedRef<import("../types/InputType").default>;
        input: import("vue").Ref<HTMLInputElement | undefined>;
        computedId: import("vue").ComputedRef<string>;
        computedAriaInvalid: import("vue").ComputedRef<boolean | "grammar" | "spelling" | undefined>;
        onInput: (evt: Event) => void;
        onChange: (evt: Event) => void;
        onBlur: (evt: FocusEvent) => void;
        focus: () => void;
        blur: () => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "input" | "change" | "blur")[], "update:modelValue" | "input" | "change" | "blur", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        max: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        min: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        step: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        type: {
            type: import("vue").PropType<import("../types/InputType").default>;
            default: string;
            validator: (value: string) => boolean;
        };
        ariaInvalid: {
            type: import("vue").PropType<boolean | "grammar" | "spelling" | undefined>;
            default: boolean;
        };
        autocomplete: {
            type: StringConstructor;
            required: boolean;
        };
        autofocus: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        form: {
            type: StringConstructor;
            required: boolean;
        };
        formatter: {
            type: FunctionConstructor;
            required: boolean;
        };
        id: {
            type: StringConstructor;
            required: boolean;
        };
        lazy: {
            type: BooleanConstructor;
            default: boolean;
        };
        lazyFormatter: {
            type: BooleanConstructor;
            default: boolean;
        };
        list: {
            type: StringConstructor;
            required: boolean;
        };
        modelValue: {
            type: import("vue").PropType<string | number>;
            default: string;
        };
        name: {
            type: StringConstructor;
            required: boolean;
        };
        number: {
            type: BooleanConstructor;
            default: boolean;
        };
        placeholder: {
            type: StringConstructor;
            required: boolean;
        };
        plaintext: {
            type: BooleanConstructor;
            default: boolean;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        required: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("../types/Size").default>;
            required: boolean;
        };
        state: {
            type: import("vue").PropType<boolean | null | undefined>;
            default: null;
        };
        trim: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onInput?: ((...args: any[]) => any) | undefined;
        onChange?: ((...args: any[]) => any) | undefined;
        onBlur?: ((...args: any[]) => any) | undefined;
    }, {
        number: boolean;
        trim: boolean;
        required: boolean;
        type: import("../types/InputType").default;
        modelValue: string | number;
        disabled: boolean;
        plaintext: boolean;
        state: boolean | null | undefined;
        autofocus: boolean;
        ariaInvalid: boolean | "grammar" | "spelling" | undefined;
        lazy: boolean;
        lazyFormatter: boolean;
        readonly: boolean;
    }>;
    BFormInvalidFeedback: import("vue").DefineComponent<{
        ariaLive: {
            type: StringConstructor;
            required: false;
        };
        forceShow: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        id: {
            type: StringConstructor;
            required: false;
        };
        role: {
            type: StringConstructor;
            required: false;
        };
        state: {
            type: BooleanConstructor;
            required: false;
            default: undefined;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        tooltip: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
    }, {
        props: {
            ariaLive?: string | undefined;
            forceShow: boolean;
            id?: string | undefined;
            role?: string | undefined;
            state: boolean;
            tag: string;
            tooltip: boolean;
        };
        computedShow: import("vue").ComputedRef<boolean>;
        classes: import("vue").ComputedRef<{
            'd-block': boolean;
            'invalid-feedback': boolean;
            'invalid-tooltip': boolean;
        }>;
        attrs: import("vue").ComputedRef<{
            id: string | null;
            role: string | null;
            'aria-live': string | null;
            'aria-atomic': string | null;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        ariaLive: {
            type: StringConstructor;
            required: false;
        };
        forceShow: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        id: {
            type: StringConstructor;
            required: false;
        };
        role: {
            type: StringConstructor;
            required: false;
        };
        state: {
            type: BooleanConstructor;
            required: false;
            default: undefined;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        tooltip: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
    }>>, {
        tag: string;
        tooltip: boolean;
        forceShow: boolean;
        state: boolean;
    }>;
    BFormRadio: import("vue").DefineComponent<{
        ariaLabel: {
            type: StringConstructor;
            required: false;
        };
        ariaLabelledBy: {
            type: StringConstructor;
            required: false;
        };
        form: {
            type: StringConstructor;
            required: false;
        };
        id: {
            type: StringConstructor;
            required: false;
        };
        name: {
            type: StringConstructor;
            required: false;
        };
        size: {
            type: StringConstructor;
            required: false;
        };
        autofocus: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        modelValue: {
            type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor | ArrayConstructor)[];
            required: false;
            default: undefined;
        };
        plain: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        button: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        switch: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        buttonVariant: {
            type: null;
            required: false;
            default: string;
        };
        inline: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        required: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        state: {
            type: BooleanConstructor;
            required: false;
            default: undefined;
        };
        value: {
            type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor)[];
            required: false;
            default: boolean;
        };
    }, {
        props: {
            ariaLabel?: string | undefined;
            ariaLabelledBy?: string | undefined;
            form?: string | undefined;
            id?: string | undefined;
            name?: string | undefined;
            size?: string | undefined;
            autofocus: boolean;
            modelValue: string | number | boolean | unknown[] | Record<string, unknown>;
            plain: boolean;
            button: boolean;
            switch: boolean;
            disabled: boolean;
            buttonVariant: import("../types/ButtonVariant").default;
            inline: boolean;
            required: boolean;
            state: boolean;
            value: string | number | boolean | Record<string, unknown>;
        };
        emit: {
            (e: "input", value: string | number | boolean | unknown[] | Record<string, unknown>): void;
            (e: "change", value: string | number | boolean | unknown[] | Record<string, unknown>): void;
            (e: "update:modelValue", value: string | number | boolean | unknown[] | Record<string, unknown>): void;
        };
        computedId: import("vue").ComputedRef<string>;
        input: import("vue").Ref<HTMLElement>;
        isFocused: import("vue").Ref<boolean>;
        localValue: import("vue").WritableComputedRef<unknown>;
        isChecked: import("vue").ComputedRef<unknown>;
        classes: import("vue").ComputedRef<any>;
        inputClasses: import("vue").ComputedRef<any>;
        labelClasses: import("vue").ComputedRef<any>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "input" | "change")[], "update:modelValue" | "input" | "change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        ariaLabel: {
            type: StringConstructor;
            required: false;
        };
        ariaLabelledBy: {
            type: StringConstructor;
            required: false;
        };
        form: {
            type: StringConstructor;
            required: false;
        };
        id: {
            type: StringConstructor;
            required: false;
        };
        name: {
            type: StringConstructor;
            required: false;
        };
        size: {
            type: StringConstructor;
            required: false;
        };
        autofocus: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        modelValue: {
            type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor | ArrayConstructor)[];
            required: false;
            default: undefined;
        };
        plain: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        button: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        switch: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        buttonVariant: {
            type: null;
            required: false;
            default: string;
        };
        inline: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        required: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        state: {
            type: BooleanConstructor;
            required: false;
            default: undefined;
        };
        value: {
            type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor)[];
            required: false;
            default: boolean;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onInput?: ((...args: any[]) => any) | undefined;
        onChange?: ((...args: any[]) => any) | undefined;
    }, {
        required: boolean;
        modelValue: string | number | boolean | unknown[] | Record<string, any>;
        button: boolean;
        disabled: boolean;
        inline: boolean;
        value: string | number | boolean | Record<string, any>;
        state: boolean;
        autofocus: boolean;
        plain: boolean;
        switch: boolean;
        buttonVariant: any;
    }>;
    BFormRadioGroup: import("vue").DefineComponent<{
        size: {
            type: null;
            required: false;
        };
        form: {
            type: StringConstructor;
            required: false;
        };
        id: {
            type: StringConstructor;
            required: false;
        };
        name: {
            type: StringConstructor;
            required: false;
        };
        modelValue: {
            type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor | ArrayConstructor)[];
            required: false;
            default: string;
        };
        ariaInvalid: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: undefined;
        };
        autofocus: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        buttonVariant: {
            type: null;
            required: false;
            default: string;
        };
        buttons: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        disabledField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        htmlField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        options: {
            type: ArrayConstructor;
            required: false;
            default: () => never[];
        };
        plain: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        required: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        stacked: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        state: {
            type: BooleanConstructor;
            required: false;
            default: undefined;
        };
        textField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        validated: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        valueField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }, {
        props: {
            size?: import("../types/Size").default;
            form?: string | undefined;
            id?: string | undefined;
            name?: string | undefined;
            modelValue: string | number | boolean | unknown[] | Record<string, unknown>;
            ariaInvalid: string | boolean;
            autofocus: boolean;
            buttonVariant: import("../types/ButtonVariant").default;
            buttons: boolean;
            disabled: boolean;
            disabledField: string;
            htmlField: string;
            options: unknown[];
            plain: boolean;
            required: boolean;
            stacked: boolean;
            state: boolean;
            textField: string;
            validated: boolean;
            valueField: string;
        };
        emit: {
            (e: "input", value: unknown): void;
            (e: "update:modelValue", value: unknown): void;
            (e: "change", value: unknown): void;
        };
        slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        slotsName: string;
        computedId: import("vue").ComputedRef<string>;
        computedName: import("vue").ComputedRef<string>;
        localValue: import("vue").WritableComputedRef<string | number | boolean | unknown[] | Record<string, unknown>>;
        checkboxList: import("vue").ComputedRef<any[]>;
        attrs: import("vue").ComputedRef<any>;
        classes: import("vue").ComputedRef<any>;
        BFormRadio: import("vue").DefineComponent<{
            ariaLabel: {
                type: StringConstructor;
                required: false;
            };
            ariaLabelledBy: {
                type: StringConstructor;
                required: false;
            };
            form: {
                type: StringConstructor;
                required: false;
            };
            id: {
                type: StringConstructor;
                required: false;
            };
            name: {
                type: StringConstructor;
                required: false;
            };
            size: {
                type: StringConstructor;
                required: false;
            };
            autofocus: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            modelValue: {
                type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor | ArrayConstructor)[];
                required: false;
                default: undefined;
            };
            plain: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            button: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            switch: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            buttonVariant: {
                type: null;
                required: false;
                default: string;
            };
            inline: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            required: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            state: {
                type: BooleanConstructor;
                required: false;
                default: undefined;
            };
            value: {
                type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor)[];
                required: false;
                default: boolean;
            };
        }, {
            props: {
                ariaLabel?: string | undefined;
                ariaLabelledBy?: string | undefined;
                form?: string | undefined;
                id?: string | undefined;
                name?: string | undefined;
                size?: string | undefined;
                autofocus: boolean;
                modelValue: string | number | boolean | unknown[] | Record<string, unknown>;
                plain: boolean;
                button: boolean;
                switch: boolean;
                disabled: boolean;
                buttonVariant: import("../types/ButtonVariant").default;
                inline: boolean;
                required: boolean;
                state: boolean;
                value: string | number | boolean | Record<string, unknown>;
            };
            emit: {
                (e: "input", value: string | number | boolean | unknown[] | Record<string, unknown>): void;
                (e: "change", value: string | number | boolean | unknown[] | Record<string, unknown>): void;
                (e: "update:modelValue", value: string | number | boolean | unknown[] | Record<string, unknown>): void;
            };
            computedId: import("vue").ComputedRef<string>;
            input: import("vue").Ref<HTMLElement>;
            isFocused: import("vue").Ref<boolean>;
            localValue: import("vue").WritableComputedRef<unknown>;
            isChecked: import("vue").ComputedRef<unknown>;
            classes: import("vue").ComputedRef<any>;
            inputClasses: import("vue").ComputedRef<any>;
            labelClasses: import("vue").ComputedRef<any>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "input" | "change")[], "update:modelValue" | "input" | "change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            ariaLabel: {
                type: StringConstructor;
                required: false;
            };
            ariaLabelledBy: {
                type: StringConstructor;
                required: false;
            };
            form: {
                type: StringConstructor;
                required: false;
            };
            id: {
                type: StringConstructor;
                required: false;
            };
            name: {
                type: StringConstructor;
                required: false;
            };
            size: {
                type: StringConstructor;
                required: false;
            };
            autofocus: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            modelValue: {
                type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor | ArrayConstructor)[];
                required: false;
                default: undefined;
            };
            plain: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            button: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            switch: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            buttonVariant: {
                type: null;
                required: false;
                default: string;
            };
            inline: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            required: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            state: {
                type: BooleanConstructor;
                required: false;
                default: undefined;
            };
            value: {
                type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor)[];
                required: false;
                default: boolean;
            };
        }>> & {
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
            onInput?: ((...args: any[]) => any) | undefined;
            onChange?: ((...args: any[]) => any) | undefined;
        }, {
            required: boolean;
            modelValue: string | number | boolean | unknown[] | Record<string, any>;
            button: boolean;
            disabled: boolean;
            inline: boolean;
            value: string | number | boolean | Record<string, any>;
            state: boolean;
            autofocus: boolean;
            plain: boolean;
            switch: boolean;
            buttonVariant: any;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "input" | "change")[], "update:modelValue" | "input" | "change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        size: {
            type: null;
            required: false;
        };
        form: {
            type: StringConstructor;
            required: false;
        };
        id: {
            type: StringConstructor;
            required: false;
        };
        name: {
            type: StringConstructor;
            required: false;
        };
        modelValue: {
            type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor | ArrayConstructor)[];
            required: false;
            default: string;
        };
        ariaInvalid: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: undefined;
        };
        autofocus: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        buttonVariant: {
            type: null;
            required: false;
            default: string;
        };
        buttons: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        disabledField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        htmlField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        options: {
            type: ArrayConstructor;
            required: false;
            default: () => never[];
        };
        plain: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        required: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        stacked: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        state: {
            type: BooleanConstructor;
            required: false;
            default: undefined;
        };
        textField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        validated: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        valueField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onInput?: ((...args: any[]) => any) | undefined;
        onChange?: ((...args: any[]) => any) | undefined;
    }, {
        required: boolean;
        modelValue: string | number | boolean | unknown[] | Record<string, any>;
        disabled: boolean;
        validated: boolean;
        state: boolean;
        autofocus: boolean;
        plain: boolean;
        buttonVariant: any;
        ariaInvalid: string | boolean;
        buttons: boolean;
        disabledField: string;
        htmlField: string;
        options: unknown[];
        stacked: boolean;
        textField: string;
        valueField: string;
    }>;
    BFormRow: import("vue").DefineComponent<{
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }>>, {
        tag: string;
    }>;
    BFormSelect: import("vue").DefineComponent<{
        ariaInvalid: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        autofocus: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        disabledField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        form: {
            type: StringConstructor;
            required: false;
        };
        htmlField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        id: {
            type: StringConstructor;
            required: false;
        };
        labelField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        multiple: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        name: {
            type: StringConstructor;
            required: false;
        };
        options: {
            type: (ObjectConstructor | ArrayConstructor)[];
            required: false;
            default: () => never[];
        };
        optionsField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        plain: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        required: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        selectSize: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        size: {
            type: null;
            required: false;
        };
        state: {
            type: BooleanConstructor;
            required: false;
            default: undefined;
        };
        textField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        valueField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        modelValue: {
            type: (StringConstructor | ObjectConstructor | NumberConstructor | ArrayConstructor)[];
            required: false;
            default: string;
        };
    }, {
        props: {
            ariaInvalid: boolean | "grammar" | "spelling";
            autofocus: boolean;
            disabled: boolean;
            disabledField: string;
            form?: string | undefined;
            htmlField: string;
            id?: string | undefined;
            labelField: string;
            multiple: boolean;
            name?: string | undefined;
            options: unknown[] | Record<string, unknown>;
            optionsField: string;
            plain: boolean;
            required: boolean;
            selectSize: number;
            size?: import("../types/Size").default;
            state: boolean;
            textField: string;
            valueField: string;
            modelValue: string | number | unknown[] | Record<string, unknown>;
        };
        emit: {
            (e: "input", value: unknown): void;
            (e: "update:modelValue", value: unknown): void;
            (e: "change", value: unknown): void;
        };
        input: import("vue").Ref<HTMLElement | undefined>;
        computedId: import("vue").ComputedRef<string>;
        handleAutofocus: () => void;
        classes: import("vue").ComputedRef<{
            [x: string]: boolean | undefined;
            'form-control': boolean;
            'form-select': boolean;
            'is-valid': boolean;
            'is-invalid': boolean;
        }>;
        computedSelectSize: import("vue").ComputedRef<number | undefined>;
        computedAriaInvalid: import("vue").ComputedRef<boolean | "grammar" | "spelling" | undefined>;
        formOptions: import("vue").ComputedRef<any>;
        localValue: import("vue").WritableComputedRef<any>;
        focus: () => void;
        blur: () => void;
        BFormSelectOption: import("vue").DefineComponent<{
            value: {
                type: null;
                required: false;
            };
            disabled: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
        }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            value: {
                type: null;
                required: false;
            };
            disabled: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
        }>>, {
            disabled: boolean;
        }>;
        BFormSelectOptionGroup: import("vue").DefineComponent<{
            label: {
                type: StringConstructor;
                required: false;
            };
            disabledField: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            htmlField: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            options: {
                type: (ObjectConstructor | ArrayConstructor)[];
                required: false;
                default: () => never[];
            };
            textField: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            valueField: {
                type: StringConstructor;
                required: false;
                default: string;
            };
        }, {
            props: {
                label?: string | undefined;
                disabledField: string;
                htmlField: string;
                options: unknown[] | Record<string, unknown>;
                textField: string;
                valueField: string;
            };
            formOptions: import("vue").ComputedRef<any>;
            BFormSelectOption: import("vue").DefineComponent<{
                value: {
                    type: null;
                    required: false;
                };
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
            }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                value: {
                    type: null;
                    required: false;
                };
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
            }>>, {
                disabled: boolean;
            }>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            label: {
                type: StringConstructor;
                required: false;
            };
            disabledField: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            htmlField: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            options: {
                type: (ObjectConstructor | ArrayConstructor)[];
                required: false;
                default: () => never[];
            };
            textField: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            valueField: {
                type: StringConstructor;
                required: false;
                default: string;
            };
        }>>, {
            disabledField: string;
            htmlField: string;
            options: unknown[] | Record<string, any>;
            textField: string;
            valueField: string;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "input" | "change")[], "update:modelValue" | "input" | "change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        ariaInvalid: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        autofocus: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        disabledField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        form: {
            type: StringConstructor;
            required: false;
        };
        htmlField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        id: {
            type: StringConstructor;
            required: false;
        };
        labelField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        multiple: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        name: {
            type: StringConstructor;
            required: false;
        };
        options: {
            type: (ObjectConstructor | ArrayConstructor)[];
            required: false;
            default: () => never[];
        };
        optionsField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        plain: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        required: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        selectSize: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        size: {
            type: null;
            required: false;
        };
        state: {
            type: BooleanConstructor;
            required: false;
            default: undefined;
        };
        textField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        valueField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        modelValue: {
            type: (StringConstructor | ObjectConstructor | NumberConstructor | ArrayConstructor)[];
            required: false;
            default: string;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onInput?: ((...args: any[]) => any) | undefined;
        onChange?: ((...args: any[]) => any) | undefined;
    }, {
        required: boolean;
        modelValue: string | number | unknown[] | Record<string, any>;
        disabled: boolean;
        multiple: boolean;
        state: boolean;
        autofocus: boolean;
        plain: boolean;
        ariaInvalid: string | boolean;
        disabledField: string;
        htmlField: string;
        options: unknown[] | Record<string, any>;
        textField: string;
        valueField: string;
        labelField: string;
        optionsField: string;
        selectSize: number;
    }>;
    BFormSelectOption: import("vue").DefineComponent<{
        value: {
            type: null;
            required: false;
        };
        disabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
    }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        value: {
            type: null;
            required: false;
        };
        disabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
    }>>, {
        disabled: boolean;
    }>;
    BFormSelectOptionGroup: import("vue").DefineComponent<{
        label: {
            type: StringConstructor;
            required: false;
        };
        disabledField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        htmlField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        options: {
            type: (ObjectConstructor | ArrayConstructor)[];
            required: false;
            default: () => never[];
        };
        textField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        valueField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }, {
        props: {
            label?: string | undefined;
            disabledField: string;
            htmlField: string;
            options: unknown[] | Record<string, unknown>;
            textField: string;
            valueField: string;
        };
        formOptions: import("vue").ComputedRef<any>;
        BFormSelectOption: import("vue").DefineComponent<{
            value: {
                type: null;
                required: false;
            };
            disabled: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
        }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            value: {
                type: null;
                required: false;
            };
            disabled: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
        }>>, {
            disabled: boolean;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        label: {
            type: StringConstructor;
            required: false;
        };
        disabledField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        htmlField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        options: {
            type: (ObjectConstructor | ArrayConstructor)[];
            required: false;
            default: () => never[];
        };
        textField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        valueField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }>>, {
        disabledField: string;
        htmlField: string;
        options: unknown[] | Record<string, any>;
        textField: string;
        valueField: string;
    }>;
    BFormText: import("vue").DefineComponent<{
        id: {
            type: StringConstructor;
            required: false;
        };
        inline: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        textVariant: {
            type: null;
            required: false;
            default: string;
        };
    }, {
        props: {
            id?: string | undefined;
            inline: boolean;
            tag: string;
            textVariant: import("../types/TextColorVariant").default;
        };
        classes: import("vue").ComputedRef<{
            [x: string]: boolean | import("../types/TextColorVariant").default;
            'form-text': boolean;
        }>;
        attrs: import("vue").ComputedRef<{
            id: string | null;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        id: {
            type: StringConstructor;
            required: false;
        };
        inline: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        textVariant: {
            type: null;
            required: false;
            default: string;
        };
    }>>, {
        tag: string;
        textVariant: any;
        inline: boolean;
    }>;
    BFormTextarea: import("vue").DefineComponent<{
        noResize: {
            type: BooleanConstructor;
            default: boolean;
        };
        rows: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
            default: number;
        };
        wrap: {
            type: StringConstructor;
            default: string;
        };
        ariaInvalid: {
            type: import("vue").PropType<boolean | "grammar" | "spelling" | undefined>;
            default: boolean;
        };
        autocomplete: {
            type: StringConstructor;
            required: boolean;
        };
        autofocus: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        form: {
            type: StringConstructor;
            required: boolean;
        };
        formatter: {
            type: FunctionConstructor;
            required: boolean;
        };
        id: {
            type: StringConstructor;
            required: boolean;
        };
        lazy: {
            type: BooleanConstructor;
            default: boolean;
        };
        lazyFormatter: {
            type: BooleanConstructor;
            default: boolean;
        };
        list: {
            type: StringConstructor;
            required: boolean;
        };
        modelValue: {
            type: import("vue").PropType<string | number>;
            default: string;
        };
        name: {
            type: StringConstructor;
            required: boolean;
        };
        number: {
            type: BooleanConstructor;
            default: boolean;
        };
        placeholder: {
            type: StringConstructor;
            required: boolean;
        };
        plaintext: {
            type: BooleanConstructor;
            default: boolean;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        required: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("../types/Size").default>;
            required: boolean;
        };
        state: {
            type: import("vue").PropType<boolean | null | undefined>;
            default: null;
        };
        trim: {
            type: BooleanConstructor;
            default: boolean;
        };
    }, {
        input: import("vue").Ref<HTMLInputElement | undefined>;
        computedId: import("vue").ComputedRef<string>;
        computedAriaInvalid: import("vue").ComputedRef<boolean | "grammar" | "spelling" | undefined>;
        onInput: (evt: Event) => void;
        onChange: (evt: Event) => void;
        onBlur: (evt: FocusEvent) => void;
        focus: () => void;
        blur: () => void;
        classes: import("vue").ComputedRef<{
            [x: string]: boolean | import("../types/Size").default;
            'form-control': boolean;
            'form-control-plaintext': boolean;
            'is-valid': boolean;
            'is-invalid': boolean;
        }>;
        computedStyles: import("vue").ComputedRef<import("vue").StyleValue | undefined>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "input" | "change" | "blur")[], "update:modelValue" | "input" | "change" | "blur", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        noResize: {
            type: BooleanConstructor;
            default: boolean;
        };
        rows: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
            default: number;
        };
        wrap: {
            type: StringConstructor;
            default: string;
        };
        ariaInvalid: {
            type: import("vue").PropType<boolean | "grammar" | "spelling" | undefined>;
            default: boolean;
        };
        autocomplete: {
            type: StringConstructor;
            required: boolean;
        };
        autofocus: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        form: {
            type: StringConstructor;
            required: boolean;
        };
        formatter: {
            type: FunctionConstructor;
            required: boolean;
        };
        id: {
            type: StringConstructor;
            required: boolean;
        };
        lazy: {
            type: BooleanConstructor;
            default: boolean;
        };
        lazyFormatter: {
            type: BooleanConstructor;
            default: boolean;
        };
        list: {
            type: StringConstructor;
            required: boolean;
        };
        modelValue: {
            type: import("vue").PropType<string | number>;
            default: string;
        };
        name: {
            type: StringConstructor;
            required: boolean;
        };
        number: {
            type: BooleanConstructor;
            default: boolean;
        };
        placeholder: {
            type: StringConstructor;
            required: boolean;
        };
        plaintext: {
            type: BooleanConstructor;
            default: boolean;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        required: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("../types/Size").default>;
            required: boolean;
        };
        state: {
            type: import("vue").PropType<boolean | null | undefined>;
            default: null;
        };
        trim: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onInput?: ((...args: any[]) => any) | undefined;
        onChange?: ((...args: any[]) => any) | undefined;
        onBlur?: ((...args: any[]) => any) | undefined;
    }, {
        number: boolean;
        trim: boolean;
        required: boolean;
        modelValue: string | number;
        disabled: boolean;
        wrap: string;
        plaintext: boolean;
        state: boolean | null | undefined;
        autofocus: boolean;
        ariaInvalid: boolean | "grammar" | "spelling" | undefined;
        lazy: boolean;
        lazyFormatter: boolean;
        readonly: boolean;
        noResize: boolean;
        rows: string | number;
    }>;
    BFormTag: import("vue").DefineComponent<{
        id: {
            type: StringConstructor;
            required: false;
        };
        title: {
            type: StringConstructor;
            required: false;
        };
        disabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        noRemove: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        pill: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        removeLabel: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        variant: {
            type: null;
            required: false;
            default: string;
        };
    }, {
        props: {
            id?: string | undefined;
            title?: string | undefined;
            disabled: boolean;
            noRemove: boolean;
            pill: boolean;
            removeLabel: string;
            tag: string;
            variant: import("../types/ColorVariant").default;
        };
        emit: (e: "remove", value?: import("vue").VNodeNormalizedChildren | undefined) => void;
        slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        tagText: import("vue").ComputedRef<string>;
        computedId: import("vue").ComputedRef<string>;
        taglabelId: import("vue").ComputedRef<string>;
        classes: import("vue").ComputedRef<(string | {
            'text-dark': boolean;
            'rounded-pill': boolean;
            disabled: boolean;
        })[]>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "remove"[], "remove", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        id: {
            type: StringConstructor;
            required: false;
        };
        title: {
            type: StringConstructor;
            required: false;
        };
        disabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        noRemove: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        pill: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        removeLabel: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        variant: {
            type: null;
            required: false;
            default: string;
        };
    }>> & {
        onRemove?: ((...args: any[]) => any) | undefined;
    }, {
        tag: string;
        variant: any;
        disabled: boolean;
        pill: boolean;
        noRemove: boolean;
        removeLabel: string;
    }>;
    BFormTags: import("vue").DefineComponent<{
        addButtonText: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        addButtonVariant: {
            type: null;
            required: false;
            default: string;
        };
        addOnChange: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        autofocus: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        duplicateTagText: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        inputAttrs: {
            type: ObjectConstructor;
            required: false;
        };
        inputClass: {
            type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
            required: false;
        };
        inputId: {
            type: StringConstructor;
            required: false;
        };
        inputType: {
            type: null;
            required: false;
            default: string;
        };
        invalidTagText: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        form: {
            type: StringConstructor;
            required: false;
        };
        limit: {
            type: NumberConstructor;
            required: false;
        };
        limitTagsText: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        modelValue: {
            type: ArrayConstructor;
            required: false;
            default: () => never[];
        };
        name: {
            type: StringConstructor;
            required: false;
        };
        noAddOnEnter: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        noOuterFocus: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        noTagRemove: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        placeholder: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        removeOnDelete: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        required: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        separator: {
            type: (StringConstructor | ArrayConstructor)[];
            required: false;
        };
        state: {
            type: BooleanConstructor;
            required: false;
            default: undefined;
        };
        size: {
            type: null;
            required: false;
        };
        tagClass: {
            type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
            required: false;
        };
        tagPills: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        tagRemoveLabel: {
            type: StringConstructor;
            required: false;
        };
        tagRemovedLabel: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        tagValidator: {
            type: FunctionConstructor;
            required: false;
            default: () => boolean;
        };
        tagVariant: {
            type: null;
            required: false;
            default: string;
        };
    }, {
        props: {
            addButtonText: string;
            addButtonVariant: import("../types/ButtonVariant").default;
            addOnChange: boolean;
            autofocus: boolean;
            disabled: boolean;
            duplicateTagText: string;
            inputAttrs?: Record<string, unknown> | undefined;
            inputClass?: string | unknown[] | Record<string, unknown> | undefined;
            inputId?: string | undefined;
            inputType: import("../types/InputType").default;
            invalidTagText: string;
            form?: string | undefined;
            limit?: number | undefined;
            limitTagsText: string;
            modelValue: string[];
            name?: string | undefined;
            noAddOnEnter: boolean;
            noOuterFocus: boolean;
            noTagRemove: boolean;
            placeholder: string;
            removeOnDelete: boolean;
            required: boolean;
            separator?: string | unknown[] | undefined;
            state: boolean;
            size?: import("../types/InputSize").default | undefined;
            tagClass?: string | unknown[] | Record<string, unknown> | undefined;
            tagPills: boolean;
            tagRemoveLabel?: string | undefined;
            tagRemovedLabel: string;
            tagValidator: (t: string) => boolean;
            tagVariant: import("../types/ColorVariant").default;
        };
        emit: {
            (e: "update:modelValue", value: string[]): void;
            (e: "input", value: string[]): void;
            (e: "tag-state", ...args: string[][]): void;
            (e: "focus", value: FocusEvent): void;
            (e: "focusin", value: FocusEvent): void;
            (e: "focusout", value: FocusEvent): void;
            (e: "blur", value: FocusEvent): void;
        };
        input: import("vue").Ref<HTMLInputElement | null>;
        computedId: import("vue").ComputedRef<string>;
        _inputId: import("vue").ComputedRef<string>;
        tags: import("vue").Ref<string[]>;
        inputValue: import("vue").Ref<string>;
        shouldRemoveOnDelete: import("vue").Ref<boolean>;
        focus: import("vue").Ref<boolean>;
        lastRemovedTag: import("vue").Ref<string>;
        validTags: import("vue").Ref<string[]>;
        invalidTags: import("vue").Ref<string[]>;
        duplicateTags: import("vue").Ref<string[]>;
        classes: import("vue").ComputedRef<{
            [x: string]: boolean | import("../types/InputSize").default | undefined;
            disabled: boolean;
            focus: boolean;
            'is-invalid': boolean;
            'is-valid': boolean;
        }>;
        isDuplicate: import("vue").ComputedRef<boolean>;
        isInvalid: import("vue").ComputedRef<boolean>;
        isLimitReached: import("vue").ComputedRef<boolean>;
        disableAddButton: import("vue").ComputedRef<boolean>;
        checkAutofocus: () => void;
        onFocusin: (e: FocusEvent) => void;
        onFocus: (e: FocusEvent) => void;
        onBlur: (e: FocusEvent) => void;
        onInput: (e: string | Event) => void;
        onChange: (e: Event) => void;
        onKeydown: (e: KeyboardEvent) => void;
        addTag: (tag?: string | undefined) => void;
        removeTag: (tag?: import("vue").VNodeNormalizedChildren | undefined) => void;
        slotAttrs: import("vue").ComputedRef<{
            addButtonText: string;
            addButtonVariant: import("../types/ButtonVariant").default;
            addTag: (tag?: string | undefined) => void;
            disableAddButton: import("vue").ComputedRef<boolean>;
            disabled: boolean;
            duplicateTagText: string;
            duplicateTags: import("vue").Ref<string[]>;
            form: string | undefined;
            inputAttrs: {
                disabled: boolean;
                form: string | undefined;
                id: import("vue").ComputedRef<string>;
                value: import("vue").Ref<string>;
            };
            inputHandlers: {
                input: (e: string | Event) => void;
                keydown: (e: KeyboardEvent) => void;
                change: (e: Event) => void;
            };
            inputId: import("vue").ComputedRef<string>;
            inputType: import("../types/InputType").default;
            invalidTagText: string;
            invalidTags: import("vue").Ref<string[]>;
            isDuplicate: import("vue").ComputedRef<boolean>;
            isInvalid: import("vue").ComputedRef<boolean>;
            isLimitReached: import("vue").ComputedRef<boolean>;
            limitTagsText: string;
            limit: number | undefined;
            noTagRemove: boolean;
            placeholder: string;
            removeTag: (tag?: import("vue").VNodeNormalizedChildren | undefined) => void;
            required: boolean;
            separator: string | unknown[] | undefined;
            size: import("../types/InputSize").default | undefined;
            state: boolean;
            tagClass: string | unknown[] | Record<string, unknown> | undefined;
            tagPills: boolean;
            tagRemoveLabel: string | undefined;
            tagVariant: import("../types/ColorVariant").default;
            tags: import("vue").Ref<string[]>;
        }>;
        BFormTag: import("vue").DefineComponent<{
            id: {
                type: StringConstructor;
                required: false;
            };
            title: {
                type: StringConstructor;
                required: false;
            };
            disabled: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            noRemove: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            pill: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            removeLabel: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            tag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            variant: {
                type: null;
                required: false;
                default: string;
            };
        }, {
            props: {
                id?: string | undefined;
                title?: string | undefined;
                disabled: boolean;
                noRemove: boolean;
                pill: boolean;
                removeLabel: string;
                tag: string;
                variant: import("../types/ColorVariant").default;
            };
            emit: (e: "remove", value?: import("vue").VNodeNormalizedChildren | undefined) => void;
            slots: Readonly<{
                [name: string]: import("vue").Slot | undefined;
            }>;
            tagText: import("vue").ComputedRef<string>;
            computedId: import("vue").ComputedRef<string>;
            taglabelId: import("vue").ComputedRef<string>;
            classes: import("vue").ComputedRef<(string | {
                'text-dark': boolean;
                'rounded-pill': boolean;
                disabled: boolean;
            })[]>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "remove"[], "remove", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            id: {
                type: StringConstructor;
                required: false;
            };
            title: {
                type: StringConstructor;
                required: false;
            };
            disabled: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            noRemove: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            pill: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            removeLabel: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            tag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            variant: {
                type: null;
                required: false;
                default: string;
            };
        }>> & {
            onRemove?: ((...args: any[]) => any) | undefined;
        }, {
            tag: string;
            variant: any;
            disabled: boolean;
            pill: boolean;
            noRemove: boolean;
            removeLabel: string;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "input" | "blur" | "tag-state" | "focus" | "focusin" | "focusout")[], "update:modelValue" | "input" | "blur" | "focus" | "tag-state" | "focusin" | "focusout", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        addButtonText: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        addButtonVariant: {
            type: null;
            required: false;
            default: string;
        };
        addOnChange: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        autofocus: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        duplicateTagText: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        inputAttrs: {
            type: ObjectConstructor;
            required: false;
        };
        inputClass: {
            type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
            required: false;
        };
        inputId: {
            type: StringConstructor;
            required: false;
        };
        inputType: {
            type: null;
            required: false;
            default: string;
        };
        invalidTagText: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        form: {
            type: StringConstructor;
            required: false;
        };
        limit: {
            type: NumberConstructor;
            required: false;
        };
        limitTagsText: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        modelValue: {
            type: ArrayConstructor;
            required: false;
            default: () => never[];
        };
        name: {
            type: StringConstructor;
            required: false;
        };
        noAddOnEnter: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        noOuterFocus: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        noTagRemove: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        placeholder: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        removeOnDelete: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        required: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        separator: {
            type: (StringConstructor | ArrayConstructor)[];
            required: false;
        };
        state: {
            type: BooleanConstructor;
            required: false;
            default: undefined;
        };
        size: {
            type: null;
            required: false;
        };
        tagClass: {
            type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
            required: false;
        };
        tagPills: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        tagRemoveLabel: {
            type: StringConstructor;
            required: false;
        };
        tagRemovedLabel: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        tagValidator: {
            type: FunctionConstructor;
            required: false;
            default: () => boolean;
        };
        tagVariant: {
            type: null;
            required: false;
            default: string;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onInput?: ((...args: any[]) => any) | undefined;
        onBlur?: ((...args: any[]) => any) | undefined;
        "onTag-state"?: ((...args: any[]) => any) | undefined;
        onFocus?: ((...args: any[]) => any) | undefined;
        onFocusin?: ((...args: any[]) => any) | undefined;
        onFocusout?: ((...args: any[]) => any) | undefined;
    }, {
        required: boolean;
        modelValue: unknown[];
        disabled: boolean;
        state: boolean;
        autofocus: boolean;
        placeholder: string;
        addButtonText: string;
        addButtonVariant: any;
        addOnChange: boolean;
        duplicateTagText: string;
        inputType: any;
        invalidTagText: string;
        limitTagsText: string;
        noAddOnEnter: boolean;
        noOuterFocus: boolean;
        noTagRemove: boolean;
        removeOnDelete: boolean;
        tagPills: boolean;
        tagRemovedLabel: string;
        tagValidator: Function;
        tagVariant: any;
    }>;
    BFormValidFeedback: import("vue").DefineComponent<{
        ariaLive: {
            type: StringConstructor;
            required: false;
        };
        forceShow: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        id: {
            type: StringConstructor;
            required: false;
        };
        role: {
            type: StringConstructor;
            required: false;
        };
        state: {
            type: BooleanConstructor;
            required: false;
            default: undefined;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        tooltip: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
    }, {
        props: {
            ariaLive?: string | undefined;
            forceShow: boolean;
            id?: string | undefined;
            role?: string | undefined;
            state: boolean;
            tag: string;
            tooltip: boolean;
        };
        computedShow: import("vue").ComputedRef<boolean>;
        classes: import("vue").ComputedRef<{
            'd-block': boolean;
            'valid-feedback': boolean;
            'valid-tooltip': boolean;
        }>;
        attrs: import("vue").ComputedRef<{
            id: string | null;
            role: string | null;
            'aria-live': string | null;
            'aria-atomic': string | null;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        ariaLive: {
            type: StringConstructor;
            required: false;
        };
        forceShow: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        id: {
            type: StringConstructor;
            required: false;
        };
        role: {
            type: StringConstructor;
            required: false;
        };
        state: {
            type: BooleanConstructor;
            required: false;
            default: undefined;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        tooltip: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
    }>>, {
        tag: string;
        tooltip: boolean;
        forceShow: boolean;
        state: boolean;
    }>;
    BImg: import("vue").DefineComponent<{
        alt: {
            type: StringConstructor;
            required: false;
            default: undefined;
        };
        blank: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        blankColor: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        block: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        center: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        fluid: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        fluidGrow: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        height: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        left: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        right: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        rounded: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        sizes: {
            type: (StringConstructor | ArrayConstructor)[];
            required: false;
        };
        src: {
            type: StringConstructor;
            required: false;
        };
        srcset: {
            type: (StringConstructor | ArrayConstructor)[];
            required: false;
        };
        thumbnail: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        width: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
    }, {
        props: {
            alt: string;
            blank: boolean;
            blankColor: string;
            block: boolean;
            center: boolean;
            fluid: boolean;
            fluidGrow: boolean;
            height?: string | number | undefined;
            left: boolean;
            right: boolean;
            rounded: string | boolean;
            sizes?: string | string[] | undefined;
            src?: string | undefined;
            srcset?: string | string[] | undefined;
            thumbnail: boolean;
            width?: string | number | undefined;
        };
        BLANK_TEMPLATE: string;
        makeBlankImgSrc: (width: any, height: any, color: string) => string;
        attrs: import("vue").ComputedRef<{
            src: string | undefined;
            alt: string;
            width: number | undefined;
            height: number | undefined;
            srcset: string | undefined;
            sizes: string | undefined;
        }>;
        classes: import("vue").ComputedRef<{
            [x: string]: boolean;
            'img-thumbnail': boolean;
            'img-fluid': boolean;
            'w-100': boolean;
            rounded: boolean;
            'd-block': boolean;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        alt: {
            type: StringConstructor;
            required: false;
            default: undefined;
        };
        blank: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        blankColor: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        block: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        center: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        fluid: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        fluidGrow: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        height: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        left: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        right: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        rounded: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        sizes: {
            type: (StringConstructor | ArrayConstructor)[];
            required: false;
        };
        src: {
            type: StringConstructor;
            required: false;
        };
        srcset: {
            type: (StringConstructor | ArrayConstructor)[];
            required: false;
        };
        thumbnail: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        width: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
    }>>, {
        alt: string;
        rounded: string | boolean;
        left: boolean;
        right: boolean;
        center: boolean;
        block: boolean;
        fluid: boolean;
        blank: boolean;
        blankColor: string;
        fluidGrow: boolean;
        thumbnail: boolean;
    }>;
    BInputGroup: import("vue").DefineComponent<{
        append: {
            type: StringConstructor;
            required: false;
        };
        appendHtml: {
            type: StringConstructor;
            required: false;
        };
        id: {
            type: StringConstructor;
            required: false;
        };
        prepend: {
            type: StringConstructor;
            required: false;
        };
        prependHtml: {
            type: StringConstructor;
            required: false;
        };
        size: {
            type: null;
            required: false;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }, {
        props: {
            append?: string | undefined;
            appendHtml?: string | undefined;
            id?: string | undefined;
            prepend?: string | undefined;
            prependHtml?: string | undefined;
            size?: import("../types/InputSize").default | undefined;
            tag: string;
        };
        classes: import("vue").ComputedRef<{
            'input-group-sm': boolean;
            'input-group-lg': boolean;
        }>;
        hasAppend: import("vue").ComputedRef<boolean>;
        hasPrepend: import("vue").ComputedRef<boolean>;
        showAppendHtml: import("vue").ComputedRef<boolean>;
        showPrependHtml: import("vue").ComputedRef<boolean>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        append: {
            type: StringConstructor;
            required: false;
        };
        appendHtml: {
            type: StringConstructor;
            required: false;
        };
        id: {
            type: StringConstructor;
            required: false;
        };
        prepend: {
            type: StringConstructor;
            required: false;
        };
        prependHtml: {
            type: StringConstructor;
            required: false;
        };
        size: {
            type: null;
            required: false;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }>>, {
        tag: string;
    }>;
    BInputGroupAddon: import("vue").DefineComponent<{
        append: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        id: {
            type: StringConstructor;
            required: false;
        };
        isText: {
            type: BooleanConstructor;
            required: false;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }, {
        props: {
            append: boolean;
            id?: string | undefined;
            isText?: boolean | undefined;
            tag: string;
        };
        computedClasses: import("vue").ComputedRef<{
            'input-group-append': boolean;
            'input-group-prepend': boolean;
        }>;
        BInputGroupText: import("vue").DefineComponent<{
            tag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
        }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
        }>>, {
            tag: string;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        append: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        id: {
            type: StringConstructor;
            required: false;
        };
        isText: {
            type: BooleanConstructor;
            required: false;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }>>, {
        tag: string;
        append: boolean;
        isText: boolean;
    }>;
    BInputGroupAppend: import("vue").DefineComponent<{
        id: {
            type: StringConstructor;
            required: false;
        };
        isText: {
            type: BooleanConstructor;
            required: false;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }, {
        BInputGroupAddon: import("vue").DefineComponent<{
            append: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            id: {
                type: StringConstructor;
                required: false;
            };
            isText: {
                type: BooleanConstructor;
                required: false;
            };
            tag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
        }, {
            props: {
                append: boolean;
                id?: string | undefined;
                isText?: boolean | undefined;
                tag: string;
            };
            computedClasses: import("vue").ComputedRef<{
                'input-group-append': boolean;
                'input-group-prepend': boolean;
            }>;
            BInputGroupText: import("vue").DefineComponent<{
                tag: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
            }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                tag: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
            }>>, {
                tag: string;
            }>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            append: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            id: {
                type: StringConstructor;
                required: false;
            };
            isText: {
                type: BooleanConstructor;
                required: false;
            };
            tag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
        }>>, {
            tag: string;
            append: boolean;
            isText: boolean;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        id: {
            type: StringConstructor;
            required: false;
        };
        isText: {
            type: BooleanConstructor;
            required: false;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }>>, {
        tag: string;
        isText: boolean;
    }>;
    BInputGroupPrepend: import("vue").DefineComponent<{
        id: {
            type: StringConstructor;
            required: false;
        };
        isText: {
            type: BooleanConstructor;
            required: false;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }, {
        BInputGroupAddon: import("vue").DefineComponent<{
            append: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            id: {
                type: StringConstructor;
                required: false;
            };
            isText: {
                type: BooleanConstructor;
                required: false;
            };
            tag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
        }, {
            props: {
                append: boolean;
                id?: string | undefined;
                isText?: boolean | undefined;
                tag: string;
            };
            computedClasses: import("vue").ComputedRef<{
                'input-group-append': boolean;
                'input-group-prepend': boolean;
            }>;
            BInputGroupText: import("vue").DefineComponent<{
                tag: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
            }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                tag: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
            }>>, {
                tag: string;
            }>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            append: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            id: {
                type: StringConstructor;
                required: false;
            };
            isText: {
                type: BooleanConstructor;
                required: false;
            };
            tag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
        }>>, {
            tag: string;
            append: boolean;
            isText: boolean;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        id: {
            type: StringConstructor;
            required: false;
        };
        isText: {
            type: BooleanConstructor;
            required: false;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }>>, {
        tag: string;
        isText: boolean;
    }>;
    BInputGroupText: import("vue").DefineComponent<{
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }>>, {
        tag: string;
    }>;
    BLink: import("vue").DefineComponent<{
        active: {
            type: BooleanConstructor;
            default: boolean;
        };
        activeClass: {
            type: StringConstructor;
            default: string;
        };
        append: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        event: {
            type: (StringConstructor | ArrayConstructor)[];
            default: string;
        };
        exact: {
            type: BooleanConstructor;
            default: boolean;
        };
        exactActiveClass: {
            type: StringConstructor;
            default: string;
        };
        href: {
            type: StringConstructor;
        };
        rel: {
            type: StringConstructor;
            default: null;
        };
        replace: {
            type: BooleanConstructor;
            default: boolean;
        };
        routerComponentName: {
            type: StringConstructor;
            default: string;
        };
        routerTag: {
            type: StringConstructor;
            default: string;
        };
        target: {
            type: import("vue").PropType<import("../types/LinkTarget").default>;
            default: string;
        };
        to: {
            type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
            default: null;
        };
    }, {
        tag: import("vue").ComputedRef<string>;
        routerAttr: import("vue").ComputedRef<{
            to: import("vue-router").RouteLocationRaw;
            href: string;
            target: import("../types/LinkTarget").default;
            rel: string | null;
            tabindex: unknown;
            'aria-disabled': string | null;
        }>;
        link: import("vue").Ref<HTMLElement>;
        clicked: (e: MouseEvent) => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        active: {
            type: BooleanConstructor;
            default: boolean;
        };
        activeClass: {
            type: StringConstructor;
            default: string;
        };
        append: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        event: {
            type: (StringConstructor | ArrayConstructor)[];
            default: string;
        };
        exact: {
            type: BooleanConstructor;
            default: boolean;
        };
        exactActiveClass: {
            type: StringConstructor;
            default: string;
        };
        href: {
            type: StringConstructor;
        };
        rel: {
            type: StringConstructor;
            default: null;
        };
        replace: {
            type: BooleanConstructor;
            default: boolean;
        };
        routerComponentName: {
            type: StringConstructor;
            default: string;
        };
        routerTag: {
            type: StringConstructor;
            default: string;
        };
        target: {
            type: import("vue").PropType<import("../types/LinkTarget").default>;
            default: string;
        };
        to: {
            type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
            default: null;
        };
    }>> & {
        onClick?: ((...args: any[]) => any) | undefined;
    }, {
        replace: boolean;
        disabled: boolean;
        exact: boolean;
        active: boolean;
        to: import("vue-router").RouteLocationRaw;
        event: string | unknown[];
        routerTag: string;
        rel: string;
        target: import("../types/LinkTarget").default;
        activeClass: string;
        append: boolean;
        exactActiveClass: string;
        routerComponentName: string;
    }>;
    BListGroup: import("vue").DefineComponent<{
        flush: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        horizontal: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        numbered: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }, {
        injectionKey: import("vue").InjectionKey<import("../types/components").BListGroupParentData>;
        props: {
            flush: boolean;
            horizontal: boolean | "sm" | "lg" | "md" | "xl" | "xxl";
            numbered: boolean;
            tag: string;
        };
        classes: import("vue").ComputedRef<{
            [x: string]: boolean;
            'list-group-flush': boolean;
            'list-group-horizontal': boolean;
            'list-group-numbered': boolean;
        }>;
        computedTag: import("vue").ComputedRef<string>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        flush: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        horizontal: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        numbered: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }>>, {
        flush: boolean;
        tag: string;
        horizontal: string | boolean;
        numbered: boolean;
    }>;
    BListGroupItem: import("vue").DefineComponent<{
        action: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        active: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        button: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        href: {
            type: StringConstructor;
            required: false;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        target: {
            type: null;
            required: false;
            default: string;
        };
        to: {
            type: null;
            required: false;
        };
        variant: {
            type: null;
            required: false;
        };
    }, {
        props: {
            action: boolean;
            active: boolean;
            button: boolean;
            disabled: boolean;
            href?: string | undefined;
            tag: string;
            target: import("../types/LinkTarget").default;
            to?: import("vue-router").RouteLocationRaw | undefined;
            variant?: import("../types/ColorVariant").default | undefined;
        };
        attrs: {
            [x: string]: unknown;
        };
        parentData: import("../types/components").BListGroupParentData | null;
        link: import("vue").ComputedRef<boolean>;
        tagComputed: import("vue").ComputedRef<string | import("vue").DefineComponent<{
            active: {
                type: BooleanConstructor;
                default: boolean;
            };
            activeClass: {
                type: StringConstructor;
                default: string;
            };
            append: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            event: {
                type: (StringConstructor | ArrayConstructor)[];
                default: string;
            };
            exact: {
                type: BooleanConstructor;
                default: boolean;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: string;
            };
            href: {
                type: StringConstructor;
            };
            rel: {
                type: StringConstructor;
                default: null;
            };
            replace: {
                type: BooleanConstructor;
                default: boolean;
            };
            routerComponentName: {
                type: StringConstructor;
                default: string;
            };
            routerTag: {
                type: StringConstructor;
                default: string;
            };
            target: {
                type: import("vue").PropType<import("../types/LinkTarget").default>;
                default: string;
            };
            to: {
                type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
                default: null;
            };
        }, {
            tag: import("vue").ComputedRef<string>;
            routerAttr: import("vue").ComputedRef<{
                to: import("vue-router").RouteLocationRaw;
                href: string;
                target: import("../types/LinkTarget").default;
                rel: string | null;
                tabindex: unknown;
                'aria-disabled': string | null;
            }>;
            link: import("vue").Ref<HTMLElement>;
            clicked: (e: MouseEvent) => void;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            active: {
                type: BooleanConstructor;
                default: boolean;
            };
            activeClass: {
                type: StringConstructor;
                default: string;
            };
            append: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            event: {
                type: (StringConstructor | ArrayConstructor)[];
                default: string;
            };
            exact: {
                type: BooleanConstructor;
                default: boolean;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: string;
            };
            href: {
                type: StringConstructor;
            };
            rel: {
                type: StringConstructor;
                default: null;
            };
            replace: {
                type: BooleanConstructor;
                default: boolean;
            };
            routerComponentName: {
                type: StringConstructor;
                default: string;
            };
            routerTag: {
                type: StringConstructor;
                default: string;
            };
            target: {
                type: import("vue").PropType<import("../types/LinkTarget").default>;
                default: string;
            };
            to: {
                type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
                default: null;
            };
        }>> & {
            onClick?: ((...args: any[]) => any) | undefined;
        }, {
            replace: boolean;
            disabled: boolean;
            exact: boolean;
            active: boolean;
            to: import("vue-router").RouteLocationRaw;
            event: string | unknown[];
            routerTag: string;
            rel: string;
            target: import("../types/LinkTarget").default;
            activeClass: string;
            append: boolean;
            exactActiveClass: string;
            routerComponentName: string;
        }>>;
        classes: import("vue").ComputedRef<{
            [x: string]: boolean | import("../types/ColorVariant").default | undefined;
            'list-group-item-action': boolean;
            active: boolean;
            disabled: boolean;
        }>;
        computedAttrs: import("vue").ComputedRef<{
            type?: string | undefined;
            disabled?: boolean | undefined;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        action: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        active: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        button: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        href: {
            type: StringConstructor;
            required: false;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        target: {
            type: null;
            required: false;
            default: string;
        };
        to: {
            type: null;
            required: false;
        };
        variant: {
            type: null;
            required: false;
        };
    }>>, {
        tag: string;
        button: boolean;
        disabled: boolean;
        active: boolean;
        target: any;
        action: boolean;
    }>;
    BModal: import("vue").DefineComponent<{
        bodyBgVariant: {
            type: null;
            required: false;
        };
        bodyClass: {
            type: StringConstructor;
            required: false;
        };
        bodyTextVariant: {
            type: null;
            required: false;
        };
        busy: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        buttonSize: {
            type: null;
            required: false;
            default: string;
        };
        cancelDisabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        cancelTitle: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        cancelVariant: {
            type: null;
            required: false;
            default: string;
        };
        centered: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        contentClass: {
            type: StringConstructor;
            required: false;
        };
        dialogClass: {
            type: StringConstructor;
            required: false;
        };
        footerBgVariant: {
            type: null;
            required: false;
        };
        footerBorderVariant: {
            type: null;
            required: false;
        };
        footerClass: {
            type: StringConstructor;
            required: false;
        };
        footerTextVariant: {
            type: null;
            required: false;
        };
        fullscreen: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        headerBgVariant: {
            type: null;
            required: false;
        };
        headerBorderVariant: {
            type: null;
            required: false;
        };
        headerClass: {
            type: StringConstructor;
            required: false;
        };
        headerCloseLabel: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        headerCloseWhite: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        headerTextVariant: {
            type: null;
            required: false;
        };
        hideBackdrop: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        hideFooter: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        hideHeader: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        hideHeaderClose: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        id: {
            type: StringConstructor;
            required: false;
        };
        modalClass: {
            type: StringConstructor;
            required: false;
        };
        modelValue: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        noCloseOnBackdrop: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        noCloseOnEsc: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        noFade: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        noFocus: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        okDisabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        okOnly: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        okTitle: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        okVariant: {
            type: null;
            required: false;
            default: string;
        };
        scrollable: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        show: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        size: {
            type: StringConstructor;
            required: false;
        };
        title: {
            type: StringConstructor;
            required: false;
        };
        titleClass: {
            type: StringConstructor;
            required: false;
        };
        titleSrOnly: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        titleTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }, {
        props: {
            bodyBgVariant?: import("../types/ColorVariant").default | undefined;
            bodyClass?: string | undefined;
            bodyTextVariant?: import("../types/ColorVariant").default | undefined;
            busy: boolean;
            buttonSize: import("../types/InputSize").default;
            cancelDisabled: boolean;
            cancelTitle: string;
            cancelVariant: import("../types/ColorVariant").default;
            centered: boolean;
            contentClass?: string | undefined;
            dialogClass?: string | undefined;
            footerBgVariant?: import("../types/ColorVariant").default | undefined;
            footerBorderVariant?: import("../types/ColorVariant").default | undefined;
            footerClass?: string | undefined;
            footerTextVariant?: import("../types/ColorVariant").default | undefined;
            fullscreen: string | boolean;
            headerBgVariant?: import("../types/ColorVariant").default | undefined;
            headerBorderVariant?: import("../types/ColorVariant").default | undefined;
            headerClass?: string | undefined;
            headerCloseLabel: string;
            headerCloseWhite: boolean;
            headerTextVariant?: import("../types/ColorVariant").default | undefined;
            hideBackdrop: boolean;
            hideFooter: boolean;
            hideHeader: boolean;
            hideHeaderClose: boolean;
            id?: string | undefined;
            modalClass?: string | undefined;
            modelValue: boolean;
            noCloseOnBackdrop: boolean;
            noCloseOnEsc: boolean;
            noFade: boolean;
            noFocus: boolean;
            okDisabled: boolean;
            okOnly: boolean;
            okTitle: string;
            okVariant: import("../types/ColorVariant").default;
            scrollable: boolean;
            show: boolean;
            size?: string | undefined;
            title?: string | undefined;
            titleClass?: string | undefined;
            titleSrOnly: boolean;
            titleTag: string;
        };
        emit: {
            (e: "update:modelValue", value: boolean): void;
            (e: "show", value: Event): void;
            (e: "shown", value: Event): void;
            (e: "hide", value: Event): void;
            (e: "hidden", value: Event): void;
            (e: "hide-prevented", value: Event): void;
            (e: "ok"): void;
            (e: "cancel"): void;
        };
        slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        element: import("vue").Ref<HTMLElement | undefined>;
        instance: import("vue").Ref<import("bootstrap/js/dist/modal").default | undefined>;
        modalClasses: import("vue").ComputedRef<(string | {
            fade: boolean;
            show: boolean;
        } | undefined)[]>;
        modalDialogClasses: import("vue").ComputedRef<(string | {
            [x: string]: string | boolean | undefined;
            'modal-fullscreen': boolean;
            'modal-dialog-centered': boolean;
            'modal-dialog-scrollable': boolean;
        } | undefined)[]>;
        computedBodyClasses: import("vue").ComputedRef<(string | {
            [x: string]: import("../types/ColorVariant").default | undefined;
        } | undefined)[]>;
        computedHeaderClasses: import("vue").ComputedRef<(string | {
            [x: string]: import("../types/ColorVariant").default | undefined;
        } | undefined)[]>;
        computedFooterClasses: import("vue").ComputedRef<(string | {
            [x: string]: import("../types/ColorVariant").default | undefined;
        } | undefined)[]>;
        computedTitleClasses: import("vue").ComputedRef<(string | {
            "visually-hidden": boolean;
        } | undefined)[]>;
        hasHeaderCloseSlot: import("vue").ComputedRef<boolean>;
        computedCloseButtonClasses: import("vue").ComputedRef<{
            "btn-close-content": boolean;
            "d-flex": boolean;
            "btn-close-white": boolean;
        }[]>;
        disableCancel: import("vue").ComputedRef<boolean>;
        disableOk: import("vue").ComputedRef<boolean>;
        BButton: import("vue").DefineComponent<{
            active: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            disabled: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            href: {
                type: StringConstructor;
                required: false;
            };
            pill: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            pressed: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: null;
            };
            rel: {
                type: StringConstructor;
                default: null;
            };
            size: {
                type: import("vue").PropType<import("../types/InputSize").default>;
            };
            squared: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            tag: {
                type: StringConstructor;
                default: string;
            };
            target: {
                type: import("vue").PropType<import("../types/LinkTarget").default>;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            variant: {
                type: import("vue").PropType<import("../types/ButtonVariant").default>;
                default: string;
            };
            activeClass: {
                type: StringConstructor;
                default: string;
            };
            append: {
                type: BooleanConstructor;
                default: boolean;
            };
            event: {
                type: (StringConstructor | ArrayConstructor)[];
                default: string;
            };
            exact: {
                type: BooleanConstructor;
                default: boolean;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: string;
            };
            replace: {
                type: BooleanConstructor;
                default: boolean;
            };
            routerComponentName: {
                type: StringConstructor;
                default: string;
            };
            routerTag: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
                default: null;
            };
        }, {
            classes: import("vue").ComputedRef<{
                [x: string]: boolean | import("../types/InputSize").default | import("../types/ButtonVariant").default | undefined;
                active: boolean;
                'rounded-pill': boolean;
                'rounded-0': boolean;
                disabled: boolean;
            }>;
            attrs: import("vue").ComputedRef<{
                'aria-disabled': string | null;
                'aria-pressed': string | null;
                autocomplete: string | null;
                disabled: boolean | null;
                href: string | undefined;
                rel: string | null;
                role: string | null;
                target: import("../types/LinkTarget").default | null;
                type: string | null;
                to: import("vue-router").RouteLocationRaw | null;
                append: boolean | null;
                activeClass: string | null;
                event: string | unknown[] | null;
                exact: boolean | null;
                exactActiveClass: string | null;
                replace: boolean | null;
                routerComponentName: string | null;
                routerTag: string | null;
            }>;
            computedTag: import("vue").ComputedRef<string>;
            clicked: (e: MouseEvent) => void;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click" | "update:pressed")[], "click" | "update:pressed", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            active: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            disabled: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            href: {
                type: StringConstructor;
                required: false;
            };
            pill: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            pressed: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: null;
            };
            rel: {
                type: StringConstructor;
                default: null;
            };
            size: {
                type: import("vue").PropType<import("../types/InputSize").default>;
            };
            squared: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            tag: {
                type: StringConstructor;
                default: string;
            };
            target: {
                type: import("vue").PropType<import("../types/LinkTarget").default>;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            variant: {
                type: import("vue").PropType<import("../types/ButtonVariant").default>;
                default: string;
            };
            activeClass: {
                type: StringConstructor;
                default: string;
            };
            append: {
                type: BooleanConstructor;
                default: boolean;
            };
            event: {
                type: (StringConstructor | ArrayConstructor)[];
                default: string;
            };
            exact: {
                type: BooleanConstructor;
                default: boolean;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: string;
            };
            replace: {
                type: BooleanConstructor;
                default: boolean;
            };
            routerComponentName: {
                type: StringConstructor;
                default: string;
            };
            routerTag: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
                default: null;
            };
        }>> & {
            onClick?: ((...args: any[]) => any) | undefined;
            "onUpdate:pressed"?: ((...args: any[]) => any) | undefined;
        }, {
            replace: boolean;
            type: string;
            tag: string;
            variant: import("../types/ButtonVariant").default;
            disabled: import("../types/Booleanish").default;
            exact: boolean;
            active: import("../types/Booleanish").default;
            pill: import("../types/Booleanish").default;
            to: import("vue-router").RouteLocationRaw;
            event: string | unknown[];
            routerTag: string;
            pressed: import("../types/Booleanish").default;
            rel: string;
            squared: import("../types/Booleanish").default;
            target: import("../types/LinkTarget").default;
            activeClass: string;
            append: boolean;
            exactActiveClass: string;
            routerComponentName: string;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "show" | "shown" | "hide" | "hidden" | "hide-prevented" | "ok" | "cancel")[], "update:modelValue" | "show" | "shown" | "hide" | "hidden" | "hide-prevented" | "ok" | "cancel", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        bodyBgVariant: {
            type: null;
            required: false;
        };
        bodyClass: {
            type: StringConstructor;
            required: false;
        };
        bodyTextVariant: {
            type: null;
            required: false;
        };
        busy: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        buttonSize: {
            type: null;
            required: false;
            default: string;
        };
        cancelDisabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        cancelTitle: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        cancelVariant: {
            type: null;
            required: false;
            default: string;
        };
        centered: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        contentClass: {
            type: StringConstructor;
            required: false;
        };
        dialogClass: {
            type: StringConstructor;
            required: false;
        };
        footerBgVariant: {
            type: null;
            required: false;
        };
        footerBorderVariant: {
            type: null;
            required: false;
        };
        footerClass: {
            type: StringConstructor;
            required: false;
        };
        footerTextVariant: {
            type: null;
            required: false;
        };
        fullscreen: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        headerBgVariant: {
            type: null;
            required: false;
        };
        headerBorderVariant: {
            type: null;
            required: false;
        };
        headerClass: {
            type: StringConstructor;
            required: false;
        };
        headerCloseLabel: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        headerCloseWhite: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        headerTextVariant: {
            type: null;
            required: false;
        };
        hideBackdrop: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        hideFooter: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        hideHeader: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        hideHeaderClose: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        id: {
            type: StringConstructor;
            required: false;
        };
        modalClass: {
            type: StringConstructor;
            required: false;
        };
        modelValue: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        noCloseOnBackdrop: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        noCloseOnEsc: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        noFade: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        noFocus: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        okDisabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        okOnly: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        okTitle: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        okVariant: {
            type: null;
            required: false;
            default: string;
        };
        scrollable: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        show: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        size: {
            type: StringConstructor;
            required: false;
        };
        title: {
            type: StringConstructor;
            required: false;
        };
        titleClass: {
            type: StringConstructor;
            required: false;
        };
        titleSrOnly: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        titleTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onShow?: ((...args: any[]) => any) | undefined;
        onShown?: ((...args: any[]) => any) | undefined;
        onHide?: ((...args: any[]) => any) | undefined;
        onHidden?: ((...args: any[]) => any) | undefined;
        onCancel?: ((...args: any[]) => any) | undefined;
        onOk?: ((...args: any[]) => any) | undefined;
        "onHide-prevented"?: ((...args: any[]) => any) | undefined;
    }, {
        show: boolean;
        modelValue: boolean;
        titleTag: string;
        busy: boolean;
        buttonSize: any;
        cancelDisabled: boolean;
        cancelTitle: string;
        cancelVariant: any;
        centered: boolean;
        fullscreen: string | boolean;
        headerCloseLabel: string;
        headerCloseWhite: boolean;
        hideBackdrop: boolean;
        hideFooter: boolean;
        hideHeader: boolean;
        hideHeaderClose: boolean;
        noCloseOnBackdrop: boolean;
        noCloseOnEsc: boolean;
        noFade: boolean;
        noFocus: boolean;
        okDisabled: boolean;
        okOnly: boolean;
        okTitle: string;
        okVariant: any;
        scrollable: boolean;
        titleSrOnly: boolean;
    }>;
    BNav: import("vue").DefineComponent<{
        align: {
            type: StringConstructor;
            required: false;
        };
        cardHeader: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        fill: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        justified: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        pills: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        small: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        tabs: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        vertical: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
    }, {
        props: {
            align?: string | undefined;
            cardHeader: boolean;
            fill: boolean;
            justified: boolean;
            pills: boolean;
            small: boolean;
            tabs: boolean;
            tag: string;
            vertical: boolean;
        };
        classes: import("vue").ComputedRef<{
            [x: string]: string | boolean | undefined;
            'nav-tabs': boolean;
            'nav-pills': boolean;
            'card-header-tabs': boolean;
            'card-header-pills': boolean;
            'flex-column': boolean;
            'nav-fill': boolean;
            'nav-justified': boolean;
            small: boolean;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        align: {
            type: StringConstructor;
            required: false;
        };
        cardHeader: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        fill: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        justified: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        pills: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        small: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        tabs: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        vertical: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
    }>>, {
        small: boolean;
        fill: boolean;
        tag: string;
        vertical: boolean;
        cardHeader: boolean;
        justified: boolean;
        pills: boolean;
        tabs: boolean;
    }>;
    BNavbar: import("vue").DefineComponent<{
        fixed: {
            type: StringConstructor;
            required: false;
        };
        print: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        sticky: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        toggleable: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        type: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        variant: {
            type: null;
            required: false;
        };
    }, {
        props: {
            fixed?: string | undefined;
            print: boolean;
            sticky: boolean;
            tag: string;
            toggleable: false | "sm" | "lg" | "md" | "xl";
            type: string;
            variant?: import("../types/ColorVariant").default | undefined;
        };
        computedRole: import("vue").ComputedRef<"navigation" | undefined>;
        computedNavbarExpand: import("vue").ComputedRef<string | undefined>;
        classes: import("vue").ComputedRef<{
            [x: string]: string | boolean | undefined;
            'd-print': boolean;
            'sticky-top': boolean;
            'navbar-expand': boolean;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        fixed: {
            type: StringConstructor;
            required: false;
        };
        print: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        sticky: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        toggleable: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        type: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        variant: {
            type: null;
            required: false;
        };
    }>>, {
        type: string;
        tag: string;
        sticky: boolean;
        print: boolean;
        toggleable: string | boolean;
    }>;
    BNavbarBrand: import("vue").DefineComponent<any, {
        props: any;
        computedTag: import("vue").ComputedRef<string>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<any>, {} | {
        [x: string]: any;
    }>;
    BNavbarNav: import("vue").DefineComponent<{
        align: {
            type: StringConstructor;
            required: false;
        };
        fill: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        justified: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        small: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }, {
        props: {
            align?: string | undefined;
            fill: boolean;
            justified: boolean;
            small: boolean;
            tag: string;
        };
        comptuedJustifyContent: import("vue").ComputedRef<string>;
        classes: import("vue").ComputedRef<{
            [x: string]: boolean;
            'nav-fill': boolean;
            'nav-justified': boolean;
            small: boolean;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        align: {
            type: StringConstructor;
            required: false;
        };
        fill: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        justified: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        small: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }>>, {
        small: boolean;
        fill: boolean;
        tag: string;
        justified: boolean;
    }>;
    BNavbarToggle: import("vue").DefineComponent<{
        disabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        label: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        target: {
            type: StringConstructor;
            required: false;
        };
    }, {
        props: {
            disabled: boolean;
            label: string;
            target?: string | undefined;
        };
        emit: (e: "click") => void;
        attrs: import("vue").ComputedRef<{
            type: import("../types/ButtonType").default;
            disabled: boolean;
            'aria-label': string;
        }>;
        classes: import("vue").ComputedRef<{
            'navbar-toggler': boolean;
            collapsed: boolean;
        }>;
        onClick: () => void;
        vBToggle: import("vue").Directive<HTMLElement, any>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        disabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        label: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        target: {
            type: StringConstructor;
            required: false;
        };
    }>> & {
        onClick?: ((...args: any[]) => any) | undefined;
    }, {
        disabled: boolean;
        label: string;
    }>;
    BNavItem: import("vue").DefineComponent<{
        active: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        href: {
            type: StringConstructor;
            required: false;
        };
        to: {
            type: null;
            required: false;
        };
    }, {
        props: {
            active: boolean;
            disabled: boolean;
            href?: string | undefined;
            to?: import("vue-router").RouteLocationRaw | undefined;
        };
        classes: import("vue").ComputedRef<{
            active: boolean;
            disabled: boolean;
        }>;
        BLink: import("vue").DefineComponent<{
            active: {
                type: BooleanConstructor;
                default: boolean;
            };
            activeClass: {
                type: StringConstructor;
                default: string;
            };
            append: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            event: {
                type: (StringConstructor | ArrayConstructor)[];
                default: string;
            };
            exact: {
                type: BooleanConstructor;
                default: boolean;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: string;
            };
            href: {
                type: StringConstructor;
            };
            rel: {
                type: StringConstructor;
                default: null;
            };
            replace: {
                type: BooleanConstructor;
                default: boolean;
            };
            routerComponentName: {
                type: StringConstructor;
                default: string;
            };
            routerTag: {
                type: StringConstructor;
                default: string;
            };
            target: {
                type: import("vue").PropType<import("../types/LinkTarget").default>;
                default: string;
            };
            to: {
                type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
                default: null;
            };
        }, {
            tag: import("vue").ComputedRef<string>;
            routerAttr: import("vue").ComputedRef<{
                to: import("vue-router").RouteLocationRaw;
                href: string;
                target: import("../types/LinkTarget").default;
                rel: string | null;
                tabindex: unknown;
                'aria-disabled': string | null;
            }>;
            link: import("vue").Ref<HTMLElement>;
            clicked: (e: MouseEvent) => void;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            active: {
                type: BooleanConstructor;
                default: boolean;
            };
            activeClass: {
                type: StringConstructor;
                default: string;
            };
            append: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            event: {
                type: (StringConstructor | ArrayConstructor)[];
                default: string;
            };
            exact: {
                type: BooleanConstructor;
                default: boolean;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: string;
            };
            href: {
                type: StringConstructor;
            };
            rel: {
                type: StringConstructor;
                default: null;
            };
            replace: {
                type: BooleanConstructor;
                default: boolean;
            };
            routerComponentName: {
                type: StringConstructor;
                default: string;
            };
            routerTag: {
                type: StringConstructor;
                default: string;
            };
            target: {
                type: import("vue").PropType<import("../types/LinkTarget").default>;
                default: string;
            };
            to: {
                type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
                default: null;
            };
        }>> & {
            onClick?: ((...args: any[]) => any) | undefined;
        }, {
            replace: boolean;
            disabled: boolean;
            exact: boolean;
            active: boolean;
            to: import("vue-router").RouteLocationRaw;
            event: string | unknown[];
            routerTag: string;
            rel: string;
            target: import("../types/LinkTarget").default;
            activeClass: string;
            append: boolean;
            exactActiveClass: string;
            routerComponentName: string;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        active: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        href: {
            type: StringConstructor;
            required: false;
        };
        to: {
            type: null;
            required: false;
        };
    }>>, {
        disabled: boolean;
        active: boolean;
    }>;
    BNavItemDropdown: import("vue").DefineComponent<{
        id: {
            type: StringConstructor;
            required: false;
        };
        text: {
            type: StringConstructor;
            required: false;
        };
        size: {
            type: null;
            required: false;
        };
        offset: {
            type: StringConstructor;
            required: false;
        };
        autoClose: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        dark: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        dropleft: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        dropright: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        dropup: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        right: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        left: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        offsetParent: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        split: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        splitVariant: {
            type: null;
            required: false;
        };
        noCaret: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        variant: {
            type: null;
            required: false;
            default: string;
        };
    }, {
        BDropdown: import("vue").DefineComponent<{
            id: {
                type: StringConstructor;
                required: false;
            };
            menuClass: {
                type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
                required: false;
            };
            size: {
                type: null;
                required: false;
            };
            splitClass: {
                type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
                required: false;
            };
            splitVariant: {
                type: null;
                required: false;
            };
            text: {
                type: StringConstructor;
                required: false;
            };
            toggleClass: {
                type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
                required: false;
            };
            autoClose: {
                type: (StringConstructor | BooleanConstructor)[];
                required: false;
                default: boolean;
            };
            block: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            boundary: {
                type: null;
                required: false;
                default: string;
            };
            dark: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            dropup: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            dropright: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            dropleft: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            noFlip: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            offset: {
                type: (StringConstructor | NumberConstructor)[];
                required: false;
                default: number;
            };
            popperOpts: {
                type: ObjectConstructor;
                required: false;
                default: () => {};
            };
            right: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            role: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            split: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            splitButtonType: {
                type: null;
                required: false;
                default: string;
            };
            splitHref: {
                type: StringConstructor;
                required: false;
                default: undefined;
            };
            noCaret: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            toggleText: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            variant: {
                type: null;
                required: false;
                default: string;
            };
        }, {
            props: {
                id?: string | undefined;
                menuClass?: string | unknown[] | Record<string, unknown> | undefined;
                size?: import("../types/Size").default;
                splitClass?: string | unknown[] | Record<string, unknown> | undefined;
                splitVariant?: import("../types/ButtonVariant").default | undefined;
                text?: string | undefined;
                toggleClass?: string | unknown[] | Record<string, unknown> | undefined;
                autoClose: boolean | "inside" | "outside";
                block: boolean;
                boundary: import("@popperjs/core").Boundary;
                dark: boolean;
                disabled: boolean;
                dropup: boolean;
                dropright: boolean;
                dropleft: boolean;
                noFlip: boolean;
                offset: string | number;
                popperOpts: Record<string, unknown>;
                right: boolean;
                role: string;
                split: boolean;
                splitButtonType: import("../types/ButtonType").default;
                splitHref: string;
                noCaret: boolean;
                toggleText: string;
                variant: import("../types/ButtonVariant").default;
            };
            emit: {
                (e: "show"): void;
                (e: "shown"): void;
                (e: "hide"): void;
                (e: "hidden"): void;
                (e: "click", event: Event): void;
                (e: "toggle"): void;
            };
            parent: import("vue").Ref<HTMLElement | undefined>;
            dropdown: import("vue").Ref<import("vue").ComponentPublicInstance<HTMLElement, {}, {}, {}, {}, {}, HTMLElement, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | undefined>;
            instance: import("vue").Ref<import("bootstrap/js/dist/dropdown").default | undefined>;
            computedId: import("vue").ComputedRef<string>;
            onSplitClick: (event: Event) => void;
            classes: import("vue").ComputedRef<{
                'd-grid': boolean;
                'd-flex': boolean;
            }>;
            buttonClasses: import("vue").ComputedRef<{
                'dropdown-toggle': boolean;
                'dropdown-toggle-no-caret': boolean;
                'w-100': boolean;
            }>;
            dropdownMenuClasses: import("vue").ComputedRef<{
                'dropdown-menu-dark': boolean;
                'dropdown-menu-right': boolean;
            }>;
            buttonAttr: import("vue").ComputedRef<{
                'data-bs-toggle': string | undefined;
                'aria-expanded': boolean | undefined;
                ref: import("vue").Ref<import("vue").ComponentPublicInstance<HTMLElement, {}, {}, {}, {}, {}, HTMLElement, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | undefined> | undefined;
                href: string | undefined;
            }>;
            splitAttr: import("vue").ComputedRef<{
                ref: import("vue").Ref<import("vue").ComponentPublicInstance<HTMLElement, {}, {}, {}, {}, {}, HTMLElement, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | undefined> | undefined;
            }>;
            hide: () => void;
            BButton: import("vue").DefineComponent<{
                active: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: boolean;
                };
                disabled: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: boolean;
                };
                href: {
                    type: StringConstructor;
                    required: false;
                };
                pill: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: boolean;
                };
                pressed: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: null;
                };
                rel: {
                    type: StringConstructor;
                    default: null;
                };
                size: {
                    type: import("vue").PropType<import("../types/InputSize").default>;
                };
                squared: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: boolean;
                };
                tag: {
                    type: StringConstructor;
                    default: string;
                };
                target: {
                    type: import("vue").PropType<import("../types/LinkTarget").default>;
                    default: string;
                };
                type: {
                    type: StringConstructor;
                    default: string;
                };
                variant: {
                    type: import("vue").PropType<import("../types/ButtonVariant").default>;
                    default: string;
                };
                activeClass: {
                    type: StringConstructor;
                    default: string;
                };
                append: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                event: {
                    type: (StringConstructor | ArrayConstructor)[];
                    default: string;
                };
                exact: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                exactActiveClass: {
                    type: StringConstructor;
                    default: string;
                };
                replace: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                routerComponentName: {
                    type: StringConstructor;
                    default: string;
                };
                routerTag: {
                    type: StringConstructor;
                    default: string;
                };
                to: {
                    type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
                    default: null;
                };
            }, {
                classes: import("vue").ComputedRef<{
                    [x: string]: boolean | import("../types/InputSize").default | import("../types/ButtonVariant").default | undefined;
                    active: boolean;
                    'rounded-pill': boolean;
                    'rounded-0': boolean;
                    disabled: boolean;
                }>;
                attrs: import("vue").ComputedRef<{
                    'aria-disabled': string | null;
                    'aria-pressed': string | null;
                    autocomplete: string | null;
                    disabled: boolean | null;
                    href: string | undefined;
                    rel: string | null;
                    role: string | null;
                    target: import("../types/LinkTarget").default | null;
                    type: string | null;
                    to: import("vue-router").RouteLocationRaw | null;
                    append: boolean | null;
                    activeClass: string | null;
                    event: string | unknown[] | null;
                    exact: boolean | null;
                    exactActiveClass: string | null;
                    replace: boolean | null;
                    routerComponentName: string | null;
                    routerTag: string | null;
                }>;
                computedTag: import("vue").ComputedRef<string>;
                clicked: (e: MouseEvent) => void;
            }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click" | "update:pressed")[], "click" | "update:pressed", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                active: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: boolean;
                };
                disabled: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: boolean;
                };
                href: {
                    type: StringConstructor;
                    required: false;
                };
                pill: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: boolean;
                };
                pressed: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: null;
                };
                rel: {
                    type: StringConstructor;
                    default: null;
                };
                size: {
                    type: import("vue").PropType<import("../types/InputSize").default>;
                };
                squared: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: boolean;
                };
                tag: {
                    type: StringConstructor;
                    default: string;
                };
                target: {
                    type: import("vue").PropType<import("../types/LinkTarget").default>;
                    default: string;
                };
                type: {
                    type: StringConstructor;
                    default: string;
                };
                variant: {
                    type: import("vue").PropType<import("../types/ButtonVariant").default>;
                    default: string;
                };
                activeClass: {
                    type: StringConstructor;
                    default: string;
                };
                append: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                event: {
                    type: (StringConstructor | ArrayConstructor)[];
                    default: string;
                };
                exact: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                exactActiveClass: {
                    type: StringConstructor;
                    default: string;
                };
                replace: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                routerComponentName: {
                    type: StringConstructor;
                    default: string;
                };
                routerTag: {
                    type: StringConstructor;
                    default: string;
                };
                to: {
                    type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
                    default: null;
                };
            }>> & {
                onClick?: ((...args: any[]) => any) | undefined;
                "onUpdate:pressed"?: ((...args: any[]) => any) | undefined;
            }, {
                replace: boolean;
                type: string;
                tag: string;
                variant: import("../types/ButtonVariant").default;
                disabled: import("../types/Booleanish").default;
                exact: boolean;
                active: import("../types/Booleanish").default;
                pill: import("../types/Booleanish").default;
                to: import("vue-router").RouteLocationRaw;
                event: string | unknown[];
                routerTag: string;
                pressed: import("../types/Booleanish").default;
                rel: string;
                squared: import("../types/Booleanish").default;
                target: import("../types/LinkTarget").default;
                activeClass: string;
                append: boolean;
                exactActiveClass: string;
                routerComponentName: string;
            }>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("show" | "shown" | "hide" | "hidden" | "click" | "toggle")[], "show" | "shown" | "hide" | "hidden" | "toggle" | "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            id: {
                type: StringConstructor;
                required: false;
            };
            menuClass: {
                type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
                required: false;
            };
            size: {
                type: null;
                required: false;
            };
            splitClass: {
                type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
                required: false;
            };
            splitVariant: {
                type: null;
                required: false;
            };
            text: {
                type: StringConstructor;
                required: false;
            };
            toggleClass: {
                type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
                required: false;
            };
            autoClose: {
                type: (StringConstructor | BooleanConstructor)[];
                required: false;
                default: boolean;
            };
            block: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            boundary: {
                type: null;
                required: false;
                default: string;
            };
            dark: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            dropup: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            dropright: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            dropleft: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            noFlip: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            offset: {
                type: (StringConstructor | NumberConstructor)[];
                required: false;
                default: number;
            };
            popperOpts: {
                type: ObjectConstructor;
                required: false;
                default: () => {};
            };
            right: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            role: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            split: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            splitButtonType: {
                type: null;
                required: false;
                default: string;
            };
            splitHref: {
                type: StringConstructor;
                required: false;
                default: undefined;
            };
            noCaret: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            toggleText: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            variant: {
                type: null;
                required: false;
                default: string;
            };
        }>> & {
            onShow?: ((...args: any[]) => any) | undefined;
            onShown?: ((...args: any[]) => any) | undefined;
            onHide?: ((...args: any[]) => any) | undefined;
            onHidden?: ((...args: any[]) => any) | undefined;
            onClick?: ((...args: any[]) => any) | undefined;
            onToggle?: ((...args: any[]) => any) | undefined;
        }, {
            split: boolean;
            variant: any;
            dark: boolean;
            disabled: boolean;
            right: boolean;
            block: boolean;
            offset: string | number;
            autoClose: string | boolean;
            boundary: any;
            dropup: boolean;
            dropright: boolean;
            dropleft: boolean;
            noFlip: boolean;
            popperOpts: Record<string, any>;
            role: string;
            splitButtonType: any;
            splitHref: string;
            noCaret: boolean;
            toggleText: string;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        id: {
            type: StringConstructor;
            required: false;
        };
        text: {
            type: StringConstructor;
            required: false;
        };
        size: {
            type: null;
            required: false;
        };
        offset: {
            type: StringConstructor;
            required: false;
        };
        autoClose: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        dark: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        dropleft: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        dropright: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        dropup: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        right: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        left: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        offsetParent: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        split: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        splitVariant: {
            type: null;
            required: false;
        };
        noCaret: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        variant: {
            type: null;
            required: false;
            default: string;
        };
    }>>, {
        split: boolean;
        variant: any;
        dark: boolean;
        left: string | boolean;
        right: boolean;
        autoClose: string | boolean;
        dropup: boolean;
        dropright: boolean;
        dropleft: boolean;
        noCaret: boolean;
        offsetParent: boolean;
    }>;
    BOffcanvas: import("vue").DefineComponent<{
        modelValue: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        bodyScrolling: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        backdrop: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        placement: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        title: {
            type: StringConstructor;
            required: false;
        };
    }, {
        props: {
            modelValue: boolean;
            bodyScrolling: boolean;
            backdrop: boolean;
            placement: string;
            title?: string | undefined;
        };
        emit: {
            (e: "update:modelValue", value: boolean): void;
            (e: "show"): void;
            (e: "shown"): void;
            (e: "hide"): void;
            (e: "hidden"): void;
        };
        element: import("vue").Ref<HTMLElement | undefined>;
        instance: import("vue").Ref<import("bootstrap/js/dist/offcanvas").default | undefined>;
        classes: import("vue").ComputedRef<{
            [x: string]: string;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "show" | "shown" | "hide" | "hidden")[], "update:modelValue" | "show" | "shown" | "hide" | "hidden", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        bodyScrolling: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        backdrop: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        placement: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        title: {
            type: StringConstructor;
            required: false;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onShow?: ((...args: any[]) => any) | undefined;
        onShown?: ((...args: any[]) => any) | undefined;
        onHide?: ((...args: any[]) => any) | undefined;
        onHidden?: ((...args: any[]) => any) | undefined;
    }, {
        modelValue: boolean;
        bodyScrolling: boolean;
        backdrop: boolean;
        placement: string;
    }>;
    BOverlay: import("vue").DefineComponent<{
        bgColor: {
            type: StringConstructor;
            required: false;
        };
        blur: {
            type: StringConstructor;
            default: string;
        };
        fixed: {
            type: BooleanConstructor;
            default: boolean;
        };
        noCenter: {
            type: BooleanConstructor;
            default: boolean;
        };
        noFade: {
            type: BooleanConstructor;
            default: boolean;
        };
        noWrap: {
            type: BooleanConstructor;
            default: boolean;
        };
        opacity: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
            validator: (value: string | number) => boolean;
        };
        overlayTag: {
            type: StringConstructor;
            default: string;
        };
        rounded: {
            type: (StringConstructor | BooleanConstructor)[];
            default: boolean;
        };
        show: {
            type: BooleanConstructor;
            default: boolean;
        };
        spinnerSmall: {
            type: BooleanConstructor;
            default: boolean;
        };
        spinnerType: {
            type: StringConstructor;
            default: string;
        };
        spinnerVariant: {
            type: StringConstructor;
            required: false;
        };
        variant: {
            type: import("vue").PropType<import("../types/ColorVariant").default>;
            default: string;
        };
        wrapTag: {
            type: StringConstructor;
            default: string;
        };
        zIndex: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
    }, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("shown" | "hidden" | "click")[], "shown" | "hidden" | "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        bgColor: {
            type: StringConstructor;
            required: false;
        };
        blur: {
            type: StringConstructor;
            default: string;
        };
        fixed: {
            type: BooleanConstructor;
            default: boolean;
        };
        noCenter: {
            type: BooleanConstructor;
            default: boolean;
        };
        noFade: {
            type: BooleanConstructor;
            default: boolean;
        };
        noWrap: {
            type: BooleanConstructor;
            default: boolean;
        };
        opacity: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
            validator: (value: string | number) => boolean;
        };
        overlayTag: {
            type: StringConstructor;
            default: string;
        };
        rounded: {
            type: (StringConstructor | BooleanConstructor)[];
            default: boolean;
        };
        show: {
            type: BooleanConstructor;
            default: boolean;
        };
        spinnerSmall: {
            type: BooleanConstructor;
            default: boolean;
        };
        spinnerType: {
            type: StringConstructor;
            default: string;
        };
        spinnerVariant: {
            type: StringConstructor;
            required: false;
        };
        variant: {
            type: import("vue").PropType<import("../types/ColorVariant").default>;
            default: string;
        };
        wrapTag: {
            type: StringConstructor;
            default: string;
        };
        zIndex: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
    }>> & {
        onShown?: ((...args: any[]) => any) | undefined;
        onHidden?: ((...args: any[]) => any) | undefined;
        onClick?: ((...args: any[]) => any) | undefined;
    }, {
        fixed: boolean;
        show: boolean;
        variant: import("../types/ColorVariant").default;
        rounded: string | boolean;
        opacity: string | number;
        zIndex: string | number;
        noWrap: boolean;
        blur: string;
        noFade: boolean;
        noCenter: boolean;
        overlayTag: string;
        spinnerSmall: boolean;
        spinnerType: string;
        wrapTag: string;
    }>;
    BPagination: import("vue").DefineComponent<{
        align: {
            type: import("vue").PropType<import("../types/Alignment").default>;
            default: string;
        };
        ariaControls: {
            type: StringConstructor;
            required: false;
        };
        ariaLabel: {
            type: StringConstructor;
            default: string;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        ellipsisClass: {
            type: (StringConstructor | ArrayConstructor)[];
            default: () => never[];
        };
        ellipsisText: {
            type: StringConstructor;
            default: string;
        };
        firstClass: {
            type: (StringConstructor | ArrayConstructor)[];
            default: () => never[];
        };
        firstNumber: {
            type: BooleanConstructor;
            default: boolean;
        };
        firstText: {
            type: StringConstructor;
            default: string;
        };
        hideEllipsis: {
            type: BooleanConstructor;
            default: boolean;
        };
        hideGotoEndButtons: {
            type: BooleanConstructor;
            default: boolean;
        };
        labelFirstPage: {
            type: StringConstructor;
            default: string;
        };
        labelLastPage: {
            type: StringConstructor;
            default: string;
        };
        labelNextPage: {
            type: StringConstructor;
            default: string;
        };
        labelPage: {
            type: StringConstructor;
            default: string;
        };
        labelPrevPage: {
            type: StringConstructor;
            default: string;
        };
        lastClass: {
            type: (StringConstructor | ArrayConstructor)[];
            default: () => never[];
        };
        lastNumber: {
            type: BooleanConstructor;
            default: boolean;
        };
        lastText: {
            type: StringConstructor;
            default: string;
        };
        limit: {
            type: NumberConstructor;
            default: number;
        };
        modelValue: {
            type: NumberConstructor;
            default: number;
        };
        nextClass: {
            type: (StringConstructor | ArrayConstructor)[];
            default: () => never[];
        };
        nextText: {
            type: StringConstructor;
            default: string;
        };
        pageClass: {
            type: (StringConstructor | ArrayConstructor)[];
            default: () => never[];
        };
        perPage: {
            type: NumberConstructor;
            default: number;
        };
        pills: {
            type: BooleanConstructor;
            default: boolean;
        };
        prevClass: {
            type: (StringConstructor | ArrayConstructor)[];
            default: () => never[];
        };
        prevText: {
            type: StringConstructor;
            default: string;
        };
        size: {
            type: import("vue").PropType<import("../types/InputSize").default>;
            required: false;
        };
        totalRows: {
            type: NumberConstructor;
            default: number;
        };
    }, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "page-click")[], "update:modelValue" | "page-click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        align: {
            type: import("vue").PropType<import("../types/Alignment").default>;
            default: string;
        };
        ariaControls: {
            type: StringConstructor;
            required: false;
        };
        ariaLabel: {
            type: StringConstructor;
            default: string;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        ellipsisClass: {
            type: (StringConstructor | ArrayConstructor)[];
            default: () => never[];
        };
        ellipsisText: {
            type: StringConstructor;
            default: string;
        };
        firstClass: {
            type: (StringConstructor | ArrayConstructor)[];
            default: () => never[];
        };
        firstNumber: {
            type: BooleanConstructor;
            default: boolean;
        };
        firstText: {
            type: StringConstructor;
            default: string;
        };
        hideEllipsis: {
            type: BooleanConstructor;
            default: boolean;
        };
        hideGotoEndButtons: {
            type: BooleanConstructor;
            default: boolean;
        };
        labelFirstPage: {
            type: StringConstructor;
            default: string;
        };
        labelLastPage: {
            type: StringConstructor;
            default: string;
        };
        labelNextPage: {
            type: StringConstructor;
            default: string;
        };
        labelPage: {
            type: StringConstructor;
            default: string;
        };
        labelPrevPage: {
            type: StringConstructor;
            default: string;
        };
        lastClass: {
            type: (StringConstructor | ArrayConstructor)[];
            default: () => never[];
        };
        lastNumber: {
            type: BooleanConstructor;
            default: boolean;
        };
        lastText: {
            type: StringConstructor;
            default: string;
        };
        limit: {
            type: NumberConstructor;
            default: number;
        };
        modelValue: {
            type: NumberConstructor;
            default: number;
        };
        nextClass: {
            type: (StringConstructor | ArrayConstructor)[];
            default: () => never[];
        };
        nextText: {
            type: StringConstructor;
            default: string;
        };
        pageClass: {
            type: (StringConstructor | ArrayConstructor)[];
            default: () => never[];
        };
        perPage: {
            type: NumberConstructor;
            default: number;
        };
        pills: {
            type: BooleanConstructor;
            default: boolean;
        };
        prevClass: {
            type: (StringConstructor | ArrayConstructor)[];
            default: () => never[];
        };
        prevText: {
            type: StringConstructor;
            default: string;
        };
        size: {
            type: import("vue").PropType<import("../types/InputSize").default>;
            required: false;
        };
        totalRows: {
            type: NumberConstructor;
            default: number;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        "onPage-click"?: ((...args: any[]) => any) | undefined;
    }, {
        modelValue: number;
        ariaLabel: string;
        disabled: boolean;
        align: import("../types/Alignment").default;
        limit: number;
        pills: boolean;
        ellipsisClass: string | unknown[];
        ellipsisText: string;
        firstClass: string | unknown[];
        firstNumber: boolean;
        firstText: string;
        hideEllipsis: boolean;
        hideGotoEndButtons: boolean;
        labelFirstPage: string;
        labelLastPage: string;
        labelNextPage: string;
        labelPage: string;
        labelPrevPage: string;
        lastClass: string | unknown[];
        lastNumber: boolean;
        lastText: string;
        nextClass: string | unknown[];
        nextText: string;
        pageClass: string | unknown[];
        perPage: number;
        prevClass: string | unknown[];
        prevText: string;
        totalRows: number;
    }>;
    BPopover: import("vue").DefineComponent<{
        container: {
            type: import("vue").PropType<string | HTMLElement | import("vue").ComponentPublicInstance<HTMLElement, {}, {}, {}, {}, {}, HTMLElement, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>>;
            default: string;
        };
        content: {
            type: StringConstructor;
        };
        id: {
            type: StringConstructor;
        };
        noninteractive: {
            type: BooleanConstructor;
            default: boolean;
        };
        placement: {
            type: import("vue").PropType<"top" | "bottom" | "left" | "right" | "auto" | (() => void)>;
            default: string;
        };
        target: {
            type: import("vue").PropType<string | HTMLElement | import("vue").ComponentPublicInstance<HTMLElement, {}, {}, {}, {}, {}, HTMLElement, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | undefined>;
            default: undefined;
        };
        title: {
            type: StringConstructor;
        };
        delay: {
            type: import("vue").PropType<number | import("../BootstrapVue").BPopoverDelayObject>;
            default: number;
        };
        triggers: {
            type: import("vue").PropType<"click" | "manual" | "focus" | "hover" | "click hover" | "click focus" | "hover focus" | "click hover focus">;
            default: string;
        };
        show: {
            type: BooleanConstructor;
            default: boolean;
        };
        variant: {
            type: import("vue").PropType<import("../types/ColorVariant").default>;
            default: undefined;
        };
        html: {
            type: BooleanConstructor;
            default: boolean;
        };
        sanitize: {
            type: BooleanConstructor;
            default: boolean;
        };
        offset: {
            type: import("vue").PropType<string | import("bootstrap/js/dist/tooltip").default.Offset | import("bootstrap/js/dist/tooltip").default.OffsetFunction>;
            default: string;
        };
    }, {
        element: import("vue").Ref<HTMLElement | undefined>;
        titleRef: import("vue").Ref<HTMLElement | undefined>;
        contentRef: import("vue").Ref<HTMLElement | undefined>;
        classes: import("vue").ComputedRef<{
            [x: string]: import("../types/ColorVariant").default | undefined;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("show" | "shown" | "hide" | "hidden" | "inserted")[], "show" | "shown" | "hide" | "hidden" | "inserted", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        container: {
            type: import("vue").PropType<string | HTMLElement | import("vue").ComponentPublicInstance<HTMLElement, {}, {}, {}, {}, {}, HTMLElement, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>>;
            default: string;
        };
        content: {
            type: StringConstructor;
        };
        id: {
            type: StringConstructor;
        };
        noninteractive: {
            type: BooleanConstructor;
            default: boolean;
        };
        placement: {
            type: import("vue").PropType<"top" | "bottom" | "left" | "right" | "auto" | (() => void)>;
            default: string;
        };
        target: {
            type: import("vue").PropType<string | HTMLElement | import("vue").ComponentPublicInstance<HTMLElement, {}, {}, {}, {}, {}, HTMLElement, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | undefined>;
            default: undefined;
        };
        title: {
            type: StringConstructor;
        };
        delay: {
            type: import("vue").PropType<number | import("../BootstrapVue").BPopoverDelayObject>;
            default: number;
        };
        triggers: {
            type: import("vue").PropType<"click" | "manual" | "focus" | "hover" | "click hover" | "click focus" | "hover focus" | "click hover focus">;
            default: string;
        };
        show: {
            type: BooleanConstructor;
            default: boolean;
        };
        variant: {
            type: import("vue").PropType<import("../types/ColorVariant").default>;
            default: undefined;
        };
        html: {
            type: BooleanConstructor;
            default: boolean;
        };
        sanitize: {
            type: BooleanConstructor;
            default: boolean;
        };
        offset: {
            type: import("vue").PropType<string | import("bootstrap/js/dist/tooltip").default.Offset | import("bootstrap/js/dist/tooltip").default.OffsetFunction>;
            default: string;
        };
    }>> & {
        onShow?: ((...args: any[]) => any) | undefined;
        onShown?: ((...args: any[]) => any) | undefined;
        onHide?: ((...args: any[]) => any) | undefined;
        onHidden?: ((...args: any[]) => any) | undefined;
        onInserted?: ((...args: any[]) => any) | undefined;
    }, {
        show: boolean;
        variant: import("../types/ColorVariant").default;
        offset: string | import("bootstrap/js/dist/tooltip").default.Offset | import("bootstrap/js/dist/tooltip").default.OffsetFunction;
        target: string | HTMLElement | import("vue").ComponentPublicInstance<HTMLElement, {}, {}, {}, {}, {}, HTMLElement, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | undefined;
        html: boolean;
        placement: "top" | "bottom" | "left" | "right" | "auto" | (() => void);
        container: string | HTMLElement | import("vue").ComponentPublicInstance<HTMLElement, {}, {}, {}, {}, {}, HTMLElement, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        delay: number | import("../BootstrapVue").BPopoverDelayObject;
        sanitize: boolean;
        noninteractive: boolean;
        triggers: "click" | "manual" | "focus" | "hover" | "click hover" | "click focus" | "hover focus" | "click hover focus";
    }>;
    BProgress: import("vue").DefineComponent<{
        variant: {
            type: null;
            required: false;
        };
        max: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        height: {
            type: StringConstructor;
            required: false;
        };
        animated: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        precision: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
            default: number;
        };
        showProgress: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        showValue: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        striped: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        value: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
            default: number;
        };
    }, {
        injectionKey: import("vue").InjectionKey<import("../types/components").BProgressParentData>;
        props: {
            variant?: import("../types/ColorVariant").default | undefined;
            max?: string | number | undefined;
            height?: string | undefined;
            animated: boolean;
            precision: string | number;
            showProgress: boolean;
            showValue: boolean;
            striped: boolean;
            value: string | number;
        };
        BProgressBar: import("vue").DefineComponent<{
            animated: {
                type: BooleanConstructor;
                default: boolean;
            };
            label: {
                type: StringConstructor;
            };
            labelHtml: {
                type: StringConstructor;
            };
            max: {
                type: (StringConstructor | NumberConstructor)[];
            };
            precision: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            showProgress: {
                type: BooleanConstructor;
                default: boolean;
            };
            showValue: {
                type: BooleanConstructor;
                default: boolean;
            };
            striped: {
                type: BooleanConstructor;
                default: boolean;
            };
            value: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            variant: {
                type: import("vue").PropType<import("../types/ColorVariant").default>;
            };
        }, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            animated: {
                type: BooleanConstructor;
                default: boolean;
            };
            label: {
                type: StringConstructor;
            };
            labelHtml: {
                type: StringConstructor;
            };
            max: {
                type: (StringConstructor | NumberConstructor)[];
            };
            precision: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            showProgress: {
                type: BooleanConstructor;
                default: boolean;
            };
            showValue: {
                type: BooleanConstructor;
                default: boolean;
            };
            striped: {
                type: BooleanConstructor;
                default: boolean;
            };
            value: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            variant: {
                type: import("vue").PropType<import("../types/ColorVariant").default>;
            };
        }>>, {
            value: string | number;
            animated: boolean;
            precision: string | number;
            showProgress: boolean;
            showValue: boolean;
            striped: boolean;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        variant: {
            type: null;
            required: false;
        };
        max: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        height: {
            type: StringConstructor;
            required: false;
        };
        animated: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        precision: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
            default: number;
        };
        showProgress: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        showValue: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        striped: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        value: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
            default: number;
        };
    }>>, {
        value: string | number;
        animated: boolean;
        precision: string | number;
        showProgress: boolean;
        showValue: boolean;
        striped: boolean;
    }>;
    BProgressBar: import("vue").DefineComponent<{
        animated: {
            type: BooleanConstructor;
            default: boolean;
        };
        label: {
            type: StringConstructor;
        };
        labelHtml: {
            type: StringConstructor;
        };
        max: {
            type: (StringConstructor | NumberConstructor)[];
        };
        precision: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        showProgress: {
            type: BooleanConstructor;
            default: boolean;
        };
        showValue: {
            type: BooleanConstructor;
            default: boolean;
        };
        striped: {
            type: BooleanConstructor;
            default: boolean;
        };
        value: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        variant: {
            type: import("vue").PropType<import("../types/ColorVariant").default>;
        };
    }, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        animated: {
            type: BooleanConstructor;
            default: boolean;
        };
        label: {
            type: StringConstructor;
        };
        labelHtml: {
            type: StringConstructor;
        };
        max: {
            type: (StringConstructor | NumberConstructor)[];
        };
        precision: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        showProgress: {
            type: BooleanConstructor;
            default: boolean;
        };
        showValue: {
            type: BooleanConstructor;
            default: boolean;
        };
        striped: {
            type: BooleanConstructor;
            default: boolean;
        };
        value: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        variant: {
            type: import("vue").PropType<import("../types/ColorVariant").default>;
        };
    }>>, {
        value: string | number;
        animated: boolean;
        precision: string | number;
        showProgress: boolean;
        showValue: boolean;
        striped: boolean;
    }>;
    BRow: import("vue").DefineComponent<{
        tag: {
            type: StringConstructor;
            default: string;
        };
        gutterX: {
            type: StringConstructor;
            default: null;
        };
        gutterY: {
            type: StringConstructor;
            default: null;
        };
        alignV: {
            type: import("vue").PropType<import("../types/Alignment").default.Vertical>;
            default: null;
        };
        alignH: {
            type: import("vue").PropType<import("../types/Alignment").default.Horizontal>;
            default: null;
        };
        alignContent: {
            type: import("vue").PropType<import("../types/Alignment").default.Content>;
            default: null;
        };
    }, {
        classes: import("vue").ComputedRef<{
            [x: string]: boolean | "fill" | "stretch" | "center" | "end" | "start" | "baseline" | "between" | "around";
        }>;
        rowColsClasses: string[];
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        tag: {
            type: StringConstructor;
            default: string;
        };
        gutterX: {
            type: StringConstructor;
            default: null;
        };
        gutterY: {
            type: StringConstructor;
            default: null;
        };
        alignV: {
            type: import("vue").PropType<import("../types/Alignment").default.Vertical>;
            default: null;
        };
        alignH: {
            type: import("vue").PropType<import("../types/Alignment").default.Horizontal>;
            default: null;
        };
        alignContent: {
            type: import("vue").PropType<import("../types/Alignment").default.Content>;
            default: null;
        };
    }>>, {
        tag: string;
        alignContent: import("../types/Alignment").default.Content;
        gutterX: string;
        gutterY: string;
        alignV: import("../types/Alignment").default.Vertical;
        alignH: import("../types/Alignment").default.Horizontal;
    }>;
    BSkeleton: import("vue").DefineComponent<{
        height: {
            type: StringConstructor;
            required: false;
        };
        width: {
            type: StringConstructor;
            required: false;
        };
        size: {
            type: StringConstructor;
            required: false;
        };
        animation: {
            type: null;
            required: false;
            default: string;
        };
        type: {
            type: null;
            required: false;
            default: string;
        };
        variant: {
            type: null;
            required: false;
        };
    }, {
        props: {
            height?: string | undefined;
            width?: string | undefined;
            size?: string | undefined;
            animation: import("../types/SkeletonAnimation").default;
            type: import("../types/SkeletonType").default;
            variant?: import("../types/ColorVariant").default | undefined;
        };
        classes: import("vue").ComputedRef<(string | {
            [x: string]: "fade" | import("../types/ColorVariant").default | "wave" | "throb" | undefined;
        })[]>;
        style: import("vue").ComputedRef<import("vue").StyleValue>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        height: {
            type: StringConstructor;
            required: false;
        };
        width: {
            type: StringConstructor;
            required: false;
        };
        size: {
            type: StringConstructor;
            required: false;
        };
        animation: {
            type: null;
            required: false;
            default: string;
        };
        type: {
            type: null;
            required: false;
            default: string;
        };
        variant: {
            type: null;
            required: false;
        };
    }>>, {
        type: any;
        animation: any;
    }>;
    BSkeletonIcon: import("vue").DefineComponent<{
        animation: {
            type: null;
            required: false;
            default: string;
        };
    }, {
        props: {
            animation: import("../types/SkeletonAnimation").default;
        };
        classes: import("vue").ComputedRef<string[]>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        animation: {
            type: null;
            required: false;
            default: string;
        };
    }>>, {
        animation: any;
    }>;
    BSkeletonTable: import("vue").DefineComponent<{
        animation: {
            type: null;
            required: false;
            default: string;
        };
        columns: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        hideHeader: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        rows: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        showFooter: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        tableProps: {
            type: ObjectConstructor;
            required: false;
        };
    }, {
        BTableSimple: import("vue").DefineComponent<{
            bordered: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            borderless: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            borderVariant: {
                type: null;
                required: false;
            };
            captionTop: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            dark: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            hover: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            responsive: {
                type: (StringConstructor | BooleanConstructor)[];
                required: false;
                default: boolean;
            };
            stacked: {
                type: (StringConstructor | BooleanConstructor)[];
                required: false;
                default: boolean;
            };
            striped: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            small: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            tableClass: {
                type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
                required: false;
            };
            tableVariant: {
                type: StringConstructor;
                required: false;
            };
        }, {
            props: {
                bordered: boolean;
                borderless: boolean;
                borderVariant?: import("../types/ColorVariant").default | undefined;
                captionTop: boolean;
                dark: boolean;
                hover: boolean;
                responsive: boolean | "sm" | "lg" | "md" | "xl" | "xxl";
                stacked: boolean | "sm" | "lg" | "md" | "xl" | "xxl";
                striped: boolean;
                small: boolean;
                tableClass?: string | unknown[] | Record<string, unknown> | undefined;
                tableVariant?: string | undefined;
            };
            classes: import("vue").ComputedRef<(string | unknown[] | Record<string, unknown> | undefined)[]>;
            responsiveClasses: import("vue").ComputedRef<{
                [x: string]: boolean;
                'table-responsive': boolean;
            }[]>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            bordered: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            borderless: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            borderVariant: {
                type: null;
                required: false;
            };
            captionTop: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            dark: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            hover: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            responsive: {
                type: (StringConstructor | BooleanConstructor)[];
                required: false;
                default: boolean;
            };
            stacked: {
                type: (StringConstructor | BooleanConstructor)[];
                required: false;
                default: boolean;
            };
            striped: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            small: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            tableClass: {
                type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
                required: false;
            };
            tableVariant: {
                type: StringConstructor;
                required: false;
            };
        }>>, {
            small: boolean;
            dark: boolean;
            stacked: string | boolean;
            hover: boolean;
            striped: boolean;
            bordered: boolean;
            borderless: boolean;
            captionTop: boolean;
            responsive: string | boolean;
        }>;
        BSkeleton: import("vue").DefineComponent<{
            height: {
                type: StringConstructor;
                required: false;
            };
            width: {
                type: StringConstructor;
                required: false;
            };
            size: {
                type: StringConstructor;
                required: false;
            };
            animation: {
                type: null;
                required: false;
                default: string;
            };
            type: {
                type: null;
                required: false;
                default: string;
            };
            variant: {
                type: null;
                required: false;
            };
        }, {
            props: {
                height?: string | undefined;
                width?: string | undefined;
                size?: string | undefined;
                animation: import("../types/SkeletonAnimation").default;
                type: import("../types/SkeletonType").default;
                variant?: import("../types/ColorVariant").default | undefined;
            };
            classes: import("vue").ComputedRef<(string | {
                [x: string]: "fade" | import("../types/ColorVariant").default | "wave" | "throb" | undefined;
            })[]>;
            style: import("vue").ComputedRef<import("vue").StyleValue>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            height: {
                type: StringConstructor;
                required: false;
            };
            width: {
                type: StringConstructor;
                required: false;
            };
            size: {
                type: StringConstructor;
                required: false;
            };
            animation: {
                type: null;
                required: false;
                default: string;
            };
            type: {
                type: null;
                required: false;
                default: string;
            };
            variant: {
                type: null;
                required: false;
            };
        }>>, {
            type: any;
            animation: any;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        animation: {
            type: null;
            required: false;
            default: string;
        };
        columns: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        hideHeader: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        rows: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        showFooter: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        tableProps: {
            type: ObjectConstructor;
            required: false;
        };
    }>>, {
        animation: any;
        columns: number;
        rows: number;
        hideHeader: boolean;
        showFooter: boolean;
    }>;
    BSkeletonWrapper: import("vue").DefineComponent<{
        loading: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
    }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        loading: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
    }>>, {
        loading: boolean;
    }>;
    BSpinner: import("vue").DefineComponent<{
        label: {
            type: StringConstructor;
            required: false;
        };
        role: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        small: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        type: {
            type: null;
            required: false;
            default: string;
        };
        variant: {
            type: null;
            required: false;
        };
    }, {
        props: {
            label?: string | undefined;
            role: string;
            small: boolean;
            tag: string;
            type: import("../types/SpinnerType").default;
            variant?: import("../types/ColorVariant").default | undefined;
        };
        classes: import("vue").ComputedRef<{
            [x: string]: boolean;
            'spinner-border': boolean;
            'spinner-border-sm': boolean;
            'spinner-grow': boolean;
            'spinner-grow-sm': boolean;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        label: {
            type: StringConstructor;
            required: false;
        };
        role: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        small: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        type: {
            type: null;
            required: false;
            default: string;
        };
        variant: {
            type: null;
            required: false;
        };
    }>>, {
        small: boolean;
        type: any;
        tag: string;
        role: string;
    }>;
    BTab: import("vue").DefineComponent<{
        id: {
            type: StringConstructor;
            required: false;
        };
        title: {
            type: StringConstructor;
            required: false;
        };
        active: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        buttonId: {
            type: StringConstructor;
            required: false;
            default: undefined;
        };
        disabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        lazy: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        noBody: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        titleItemClass: {
            type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
            required: false;
            default: undefined;
        };
        titleLinkAttributes: {
            type: ObjectConstructor;
            required: false;
            default: undefined;
        };
        titleLinkClass: {
            type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
            required: false;
            default: undefined;
        };
    }, {
        props: {
            id?: string | undefined;
            title?: string | undefined;
            active: boolean;
            buttonId: string;
            disabled: boolean;
            lazy: boolean;
            noBody: string | boolean;
            tag: string;
            titleItemClass: string | unknown[] | Record<string, unknown>;
            titleLinkAttributes: Record<string, unknown>;
            titleLinkClass: string | unknown[] | Record<string, unknown>;
        };
        parentData: import("../types/components").BTabsParentData | null;
        computedLazy: import("vue").ComputedRef<boolean>;
        computedActive: import("vue").ComputedRef<boolean>;
        showSlot: import("vue").ComputedRef<boolean>;
        classes: import("vue").ComputedRef<{
            active: boolean;
            show: boolean;
            'card-body': boolean | undefined;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        id: {
            type: StringConstructor;
            required: false;
        };
        title: {
            type: StringConstructor;
            required: false;
        };
        active: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        buttonId: {
            type: StringConstructor;
            required: false;
            default: undefined;
        };
        disabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        lazy: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        noBody: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        titleItemClass: {
            type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
            required: false;
            default: undefined;
        };
        titleLinkAttributes: {
            type: ObjectConstructor;
            required: false;
            default: undefined;
        };
        titleLinkClass: {
            type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
            required: false;
            default: undefined;
        };
    }>>, {
        tag: string;
        disabled: boolean;
        active: boolean;
        noBody: string | boolean;
        lazy: boolean;
        buttonId: string;
        titleItemClass: string | unknown[] | Record<string, any>;
        titleLinkAttributes: Record<string, any>;
        titleLinkClass: string | unknown[] | Record<string, any>;
    }>;
    BTable: import("vue").DefineComponent<{
        align: {
            type: null;
            required: false;
        };
        caption: {
            type: StringConstructor;
            required: false;
        };
        captionTop: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        borderless: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        bordered: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        borderVariant: {
            type: null;
            required: false;
        };
        dark: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        fields: {
            type: ArrayConstructor;
            required: false;
            default: () => never[];
        };
        footClone: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        hover: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        items: {
            type: ArrayConstructor;
            required: false;
            default: () => never[];
        };
        responsive: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        small: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        striped: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        variant: {
            type: null;
            required: false;
        };
    }, {
        props: {
            align?: import("../types/VerticalAlign").default | undefined;
            caption?: string | undefined;
            captionTop: boolean;
            borderless: boolean;
            bordered: boolean;
            borderVariant?: import("../types/ColorVariant").default | undefined;
            dark: boolean;
            fields: import("../types/TableField").default<Record<string, unknown>>[];
            footClone: boolean;
            hover: boolean;
            items: import("../types/TableItem").default<Record<string, unknown>>[];
            responsive: boolean | "sm" | "lg" | "md" | "xl" | "xxl";
            small: boolean;
            striped: boolean;
            variant?: import("../types/ColorVariant").default | undefined;
        };
        classes: import("vue").ComputedRef<(string | {
            [x: string]: boolean | import("../types/ColorVariant").default | import("../types/VerticalAlign").default | undefined;
            'table-striped': boolean;
            'table-hover': boolean;
            'table-dark': boolean;
            'table-bordered': boolean;
            'table-borderless': boolean;
            'table-sm': boolean;
            'caption-top': boolean;
        })[]>;
        itemHelper: {
            normaliseFields: (origFields: import("../types/TableField").default<Record<string, unknown>>[], items: import("../types/TableItem").default<Record<string, unknown>>[]) => import("../types").TableFieldObject<Record<string, unknown>>[];
        };
        computedFields: import("vue").ComputedRef<import("../types").TableFieldObject<Record<string, unknown>>[]>;
        responsiveClasses: import("vue").ComputedRef<{
            [x: string]: boolean;
            'table-responsive': boolean;
        }[]>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        align: {
            type: null;
            required: false;
        };
        caption: {
            type: StringConstructor;
            required: false;
        };
        captionTop: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        borderless: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        bordered: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        borderVariant: {
            type: null;
            required: false;
        };
        dark: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        fields: {
            type: ArrayConstructor;
            required: false;
            default: () => never[];
        };
        footClone: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        hover: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        items: {
            type: ArrayConstructor;
            required: false;
            default: () => never[];
        };
        responsive: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        small: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        striped: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        variant: {
            type: null;
            required: false;
        };
    }>>, {
        small: boolean;
        dark: boolean;
        items: unknown[];
        hover: boolean;
        striped: boolean;
        bordered: boolean;
        borderless: boolean;
        captionTop: boolean;
        responsive: string | boolean;
        fields: unknown[];
        footClone: boolean;
    }>;
    BTableSimple: import("vue").DefineComponent<{
        bordered: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        borderless: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        borderVariant: {
            type: null;
            required: false;
        };
        captionTop: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        dark: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        hover: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        responsive: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        stacked: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        striped: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        small: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        tableClass: {
            type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
            required: false;
        };
        tableVariant: {
            type: StringConstructor;
            required: false;
        };
    }, {
        props: {
            bordered: boolean;
            borderless: boolean;
            borderVariant?: import("../types/ColorVariant").default | undefined;
            captionTop: boolean;
            dark: boolean;
            hover: boolean;
            responsive: boolean | "sm" | "lg" | "md" | "xl" | "xxl";
            stacked: boolean | "sm" | "lg" | "md" | "xl" | "xxl";
            striped: boolean;
            small: boolean;
            tableClass?: string | unknown[] | Record<string, unknown> | undefined;
            tableVariant?: string | undefined;
        };
        classes: import("vue").ComputedRef<(string | unknown[] | Record<string, unknown> | undefined)[]>;
        responsiveClasses: import("vue").ComputedRef<{
            [x: string]: boolean;
            'table-responsive': boolean;
        }[]>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        bordered: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        borderless: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        borderVariant: {
            type: null;
            required: false;
        };
        captionTop: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        dark: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        hover: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        responsive: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        stacked: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        striped: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        small: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        tableClass: {
            type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
            required: false;
        };
        tableVariant: {
            type: StringConstructor;
            required: false;
        };
    }>>, {
        small: boolean;
        dark: boolean;
        stacked: string | boolean;
        hover: boolean;
        striped: boolean;
        bordered: boolean;
        borderless: boolean;
        captionTop: boolean;
        responsive: string | boolean;
    }>;
    BTbody: import("vue").DefineComponent<{
        headVariant: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
    }, {
        props: {
            headVariant: boolean;
        };
        classes: import("vue").ComputedRef<{
            [x: string]: boolean;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        headVariant: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
    }>>, {
        headVariant: boolean;
    }>;
    BTd: import("vue").DefineComponent<{
        colspan: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        rowspan: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        stackedHeading: {
            type: StringConstructor;
            required: false;
        };
        stickyColumn: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        variant: {
            type: null;
            required: false;
        };
    }, {
        props: {
            colspan?: string | number | undefined;
            rowspan?: string | number | undefined;
            stackedHeading?: string | undefined;
            stickyColumn: boolean;
            variant?: import("../types/ColorVariant").default | undefined;
        };
        classes: import("vue").ComputedRef<{
            [x: string]: boolean | import("../types/ColorVariant").default | undefined;
            'b-table-sticky-column': boolean;
            'table-b-table-default': boolean;
        }>;
        scope: import("vue").ComputedRef<"colspan" | "rowspan" | "col">;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        colspan: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        rowspan: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        stackedHeading: {
            type: StringConstructor;
            required: false;
        };
        stickyColumn: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        variant: {
            type: null;
            required: false;
        };
    }>>, {
        stickyColumn: boolean;
    }>;
    BTfoot: import("vue").DefineComponent<{
        footVariant: {
            type: StringConstructor;
            required: false;
        };
    }, {
        props: {
            footVariant?: string | undefined;
        };
        classes: import("vue").ComputedRef<{
            [x: string]: string | undefined;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        footVariant: {
            type: StringConstructor;
            required: false;
        };
    }>>, {}>;
    BTh: import("vue").DefineComponent<{
        colspan: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        rowspan: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        stackedHeading: {
            type: StringConstructor;
            required: false;
        };
        stickyColumn: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        variant: {
            type: StringConstructor;
            required: false;
        };
    }, {
        props: {
            colspan?: string | number | undefined;
            rowspan?: string | number | undefined;
            stackedHeading?: string | undefined;
            stickyColumn: boolean;
            variant?: string | undefined;
        };
        classes: import("vue").ComputedRef<{
            [x: string]: string | boolean | undefined;
            'b-table-sticky-column': boolean;
            'table-b-table-default': boolean;
        }>;
        scope: import("vue").ComputedRef<"colspan" | "rowspan" | "col">;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        colspan: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        rowspan: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        stackedHeading: {
            type: StringConstructor;
            required: false;
        };
        stickyColumn: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        variant: {
            type: StringConstructor;
            required: false;
        };
    }>>, {
        stickyColumn: boolean;
    }>;
    BThead: import("vue").DefineComponent<{
        headVariant: {
            type: StringConstructor;
            required: false;
        };
    }, {
        props: {
            headVariant?: string | undefined;
        };
        classes: import("vue").ComputedRef<{
            [x: string]: string | undefined;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        headVariant: {
            type: StringConstructor;
            required: false;
        };
    }>>, {}>;
    BTr: import("vue").DefineComponent<{
        variant: {
            type: StringConstructor;
            required: false;
        };
    }, {
        props: {
            variant?: string | undefined;
        };
        classes: import("vue").ComputedRef<{
            [x: string]: string | undefined;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        variant: {
            type: StringConstructor;
            required: false;
        };
    }>>, {}>;
    BToast: import("vue").DefineComponent<{
        delay: {
            type: NumberConstructor;
            default: number;
        };
        bodyClass: {
            type: StringConstructor;
        };
        body: {
            type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }> | undefined>;
        };
        headerClass: {
            type: StringConstructor;
        };
        headerTag: {
            type: StringConstructor;
            default: string;
        };
        animation: {
            type: BooleanConstructor;
            default: boolean;
        };
        id: {
            type: StringConstructor;
        };
        isStatus: {
            type: BooleanConstructor;
            default: boolean;
        };
        autoHide: {
            type: BooleanConstructor;
            default: boolean;
        };
        noCloseButton: {
            type: BooleanConstructor;
            default: boolean;
        };
        noFade: {
            type: BooleanConstructor;
            default: boolean;
        };
        noHoverPause: {
            type: BooleanConstructor;
            default: boolean;
        };
        solid: {
            type: BooleanConstructor;
            default: boolean;
        };
        static: {
            type: BooleanConstructor;
            default: boolean;
        };
        title: {
            type: StringConstructor;
        };
        modelValue: {
            type: BooleanConstructor;
            default: boolean;
        };
        toastClass: {
            type: import("vue").PropType<string[]>;
        };
        variant: {
            type: import("vue").PropType<import("../types/ColorVariant").default>;
        };
        active: {
            type: BooleanConstructor;
            default: boolean;
        };
        activeClass: {
            type: StringConstructor;
            default: string;
        };
        append: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        event: {
            type: (StringConstructor | ArrayConstructor)[];
            default: string;
        };
        exact: {
            type: BooleanConstructor;
            default: boolean;
        };
        exactActiveClass: {
            type: StringConstructor;
            default: string;
        };
        href: {
            type: StringConstructor;
        };
        rel: {
            type: StringConstructor;
            default: null;
        };
        replace: {
            type: BooleanConstructor;
            default: boolean;
        };
        routerComponentName: {
            type: StringConstructor;
            default: string;
        };
        routerTag: {
            type: StringConstructor;
            default: string;
        };
        target: {
            type: import("vue").PropType<import("../types/LinkTarget").default>;
            default: string;
        };
        to: {
            type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
            default: null;
        };
    }, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "destroyed")[], "update:modelValue" | "destroyed", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        delay: {
            type: NumberConstructor;
            default: number;
        };
        bodyClass: {
            type: StringConstructor;
        };
        body: {
            type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }> | undefined>;
        };
        headerClass: {
            type: StringConstructor;
        };
        headerTag: {
            type: StringConstructor;
            default: string;
        };
        animation: {
            type: BooleanConstructor;
            default: boolean;
        };
        id: {
            type: StringConstructor;
        };
        isStatus: {
            type: BooleanConstructor;
            default: boolean;
        };
        autoHide: {
            type: BooleanConstructor;
            default: boolean;
        };
        noCloseButton: {
            type: BooleanConstructor;
            default: boolean;
        };
        noFade: {
            type: BooleanConstructor;
            default: boolean;
        };
        noHoverPause: {
            type: BooleanConstructor;
            default: boolean;
        };
        solid: {
            type: BooleanConstructor;
            default: boolean;
        };
        static: {
            type: BooleanConstructor;
            default: boolean;
        };
        title: {
            type: StringConstructor;
        };
        modelValue: {
            type: BooleanConstructor;
            default: boolean;
        };
        toastClass: {
            type: import("vue").PropType<string[]>;
        };
        variant: {
            type: import("vue").PropType<import("../types/ColorVariant").default>;
        };
        active: {
            type: BooleanConstructor;
            default: boolean;
        };
        activeClass: {
            type: StringConstructor;
            default: string;
        };
        append: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        event: {
            type: (StringConstructor | ArrayConstructor)[];
            default: string;
        };
        exact: {
            type: BooleanConstructor;
            default: boolean;
        };
        exactActiveClass: {
            type: StringConstructor;
            default: string;
        };
        href: {
            type: StringConstructor;
        };
        rel: {
            type: StringConstructor;
            default: null;
        };
        replace: {
            type: BooleanConstructor;
            default: boolean;
        };
        routerComponentName: {
            type: StringConstructor;
            default: string;
        };
        routerTag: {
            type: StringConstructor;
            default: string;
        };
        target: {
            type: import("vue").PropType<import("../types/LinkTarget").default>;
            default: string;
        };
        to: {
            type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
            default: null;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onDestroyed?: ((...args: any[]) => any) | undefined;
    }, {
        replace: boolean;
        modelValue: boolean;
        disabled: boolean;
        solid: boolean;
        exact: boolean;
        static: boolean;
        animation: boolean;
        active: boolean;
        to: import("vue-router").RouteLocationRaw;
        event: string | unknown[];
        routerTag: string;
        rel: string;
        target: import("../types/LinkTarget").default;
        activeClass: string;
        append: boolean;
        exactActiveClass: string;
        routerComponentName: string;
        headerTag: string;
        noFade: boolean;
        delay: number;
        isStatus: boolean;
        autoHide: boolean;
        noCloseButton: boolean;
        noHoverPause: boolean;
    }>;
    BToaster: import("vue").DefineComponent<{
        position: {
            type: null;
            required: false;
            default: string;
        };
        instance: {
            type: null;
            required: false;
        };
    }, {
        props: {
            position: "top-left" | "top-right" | "top-center" | "bottom-left" | "bottom-right" | "bottom-center" | "middle-left" | "middle-right" | "middle-center";
            instance?: import("./BToast/plugin").ToastInstance | undefined;
        };
        toastPositions: {
            'top-left': string;
            'top-center': string;
            'top-right': string;
            'middle-left': string;
            'middle-center': string;
            'middle-right': string;
            'bottom-left': string;
            'bottom-center': string;
            'bottom-right': string;
        };
        positionClass: import("vue").ComputedRef<string>;
        handleDestroy: (id: string) => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        position: {
            type: null;
            required: false;
            default: string;
        };
        instance: {
            type: null;
            required: false;
        };
    }>>, {
        position: any;
    }>;
    BToastContainer: import("vue").DefineComponent<{
        position: {
            type: null;
            required: false;
            default: string;
        };
        instance: {
            type: null;
            required: false;
        };
    }, {
        props: {
            position: "top-left" | "top-right" | "top-center" | "bottom-left" | "bottom-right" | "bottom-center" | "middle-left" | "middle-right" | "middle-center";
            instance?: import("./BToast/plugin").ToastInstance | undefined;
        };
        toastPositions: {
            'top-left': string;
            'top-center': string;
            'top-right': string;
            'middle-left': string;
            'middle-center': string;
            'middle-right': string;
            'bottom-left': string;
            'bottom-center': string;
            'bottom-right': string;
        };
        positionClass: import("vue").ComputedRef<string>;
        handleDestroy: (id: string) => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        position: {
            type: null;
            required: false;
            default: string;
        };
        instance: {
            type: null;
            required: false;
        };
    }>>, {
        position: any;
    }>;
    BTabs: import("vue").DefineComponent<{
        activeNavItemClass: {
            type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
            required: false;
            default: undefined;
        };
        activeTabClass: {
            type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
            required: false;
            default: undefined;
        };
        align: {
            type: null;
            required: false;
            default: undefined;
        };
        card: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        contentClass: {
            type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
            required: false;
            default: undefined;
        };
        end: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        fill: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        id: {
            type: StringConstructor;
            required: false;
            default: undefined;
        };
        justified: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        lazy: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        navClass: {
            type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
            required: false;
            default: undefined;
        };
        navWrapperClass: {
            type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
            required: false;
            default: undefined;
        };
        noFade: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        noNavStyle: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        pills: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        small: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        vertical: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        modelValue: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
    }, {
        injectionKey: import("vue").InjectionKey<import("../types/components").BTabsParentData>;
        props: {
            activeNavItemClass: string | unknown[] | Record<string, unknown>;
            activeTabClass: string | unknown[] | Record<string, unknown>;
            align: import("../types/Alignment").default;
            card: boolean;
            contentClass: string | unknown[] | Record<string, unknown>;
            end: boolean;
            fill: boolean;
            id: string;
            justified: boolean;
            lazy: boolean;
            navClass: string | unknown[] | Record<string, unknown>;
            navWrapperClass: string | unknown[] | Record<string, unknown>;
            noFade: boolean;
            noNavStyle: boolean;
            pills: boolean;
            small: boolean;
            tag: string;
            vertical: boolean;
            modelValue: number;
        };
        emit: {
            (e: "update:modelValue", value: number): void;
            (e: "activate-tab", v1: number, v2: number, v3: import("../utils").BvEvent): void;
            (e: "click"): void;
        };
        slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        _tabIndex: import("vue").Ref<number>;
        _currentTabButton: import("vue").Ref<string>;
        tabIndex: import("vue").WritableComputedRef<number>;
        tabs: import("vue").ComputedRef<any[]>;
        showEmpty: import("vue").ComputedRef<boolean>;
        classes: import("vue").ComputedRef<{
            'd-flex align-items-start': boolean;
        }>;
        navTabsClasses: import("vue").ComputedRef<{
            [x: string]: boolean;
            'nav-pills': boolean;
            'flex-column me-3': boolean;
            'nav-fill': boolean;
            'card-header-tabs': boolean;
            'nav-justified': boolean;
            'nav-tabs': boolean;
            small: boolean;
        }>;
        activateTab: (index: number) => boolean;
        handleClick: (event: MouseEvent, index: number) => void;
        getTabs: (slots: any) => any[];
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "click" | "activate-tab")[], "update:modelValue" | "click" | "activate-tab", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        activeNavItemClass: {
            type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
            required: false;
            default: undefined;
        };
        activeTabClass: {
            type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
            required: false;
            default: undefined;
        };
        align: {
            type: null;
            required: false;
            default: undefined;
        };
        card: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        contentClass: {
            type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
            required: false;
            default: undefined;
        };
        end: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        fill: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        id: {
            type: StringConstructor;
            required: false;
            default: undefined;
        };
        justified: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        lazy: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        navClass: {
            type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
            required: false;
            default: undefined;
        };
        navWrapperClass: {
            type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
            required: false;
            default: undefined;
        };
        noFade: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        noNavStyle: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        pills: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        small: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        vertical: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        modelValue: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onClick?: ((...args: any[]) => any) | undefined;
        "onActivate-tab"?: ((...args: any[]) => any) | undefined;
    }, {
        small: boolean;
        fill: boolean;
        id: string;
        modelValue: number;
        tag: string;
        end: boolean;
        vertical: boolean;
        align: any;
        lazy: boolean;
        contentClass: string | unknown[] | Record<string, any>;
        noFade: boolean;
        justified: boolean;
        pills: boolean;
        activeNavItemClass: string | unknown[] | Record<string, any>;
        activeTabClass: string | unknown[] | Record<string, any>;
        card: boolean;
        navClass: string | unknown[] | Record<string, any>;
        navWrapperClass: string | unknown[] | Record<string, any>;
        noNavStyle: boolean;
    }>;
    BTransition: import("vue").DefineComponent<{
        appear: {
            type: BooleanConstructor;
            default: boolean;
        };
        mode: {
            type: import("vue").PropType<import("../types/TransitionMode").default>;
            required: false;
        };
        noFade: {
            type: BooleanConstructor;
            default: boolean;
        };
        transProps: {
            type: ObjectConstructor;
            required: false;
        };
    }, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        appear: {
            type: BooleanConstructor;
            default: boolean;
        };
        mode: {
            type: import("vue").PropType<import("../types/TransitionMode").default>;
            required: false;
        };
        noFade: {
            type: BooleanConstructor;
            default: boolean;
        };
        transProps: {
            type: ObjectConstructor;
            required: false;
        };
    }>>, {
        noFade: boolean;
        appear: boolean;
    }>;
    BToastPlugin: import("@vue/runtime-core").Plugin;
};
export default _default;
